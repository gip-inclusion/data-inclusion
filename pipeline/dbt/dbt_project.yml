name: 'data_inclusion'
version: '1.0.0'
config-version: 2

profile: 'data_inclusion'

model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets:
  - "target"
  - "dbt_packages"

flags:
  send_anonymous_usage_stats: false

  silence:
  # configure which tests dbt should run for the selected nodes.
  # given that we build subsets of the DAG (e..g staging THEN intermediate),
  # we cannot use the default strategy `eager`, that would run tests on unbuilt
  # children models (e.g. intermediate tests when building staging).
  # `buildable` means only runs tests that refer to selected nodes or their ancestors.
  indirect_selection: buildable

models:
  data_inclusion:
    +sql_header: "SET LC_TIME='fr_FR.utf8';"

    staging:
      +schema: staging

      sources:
        # These models can be materialized as views, because:
        # - their upstream source tables are loaded with a TRUNCATE.
        # - they usually contain lightweight transformations.
        +materialized: view
        carif_oref:
          # These models are materialized as views, because they contain heavy
          # transformations.
          +materialized: table
        soliguide:
          +materialized: table

      # The following models use table materialization, because:
      # - their upstream source tables are (currently) loaded with DROP/CREATE.
      # - using views would require cascading, which could impact downstream models.
      # - they defined indexes.
      decoupage_administratif:
        +materialized: table
      sirene:
        +materialized: table
      etat_civil:
        +materialized: table

    intermediate:
      +schema: "{{ 'intermediate_tmp' if var('build_intermediate_tmp', false) else 'intermediate' }}"
      +materialized: table

    marts:
      +schema: marts
      +materialized: table
      +contract:
        enforced: true

data_tests:
  data_inclusion:
    +store_failures: true

seeds:
  data_inclusion:
    schema:
      +schema: schema
      +full_refresh: true
      +column_types:
        value: text
        label: text
        description: text
      +post-hook:
        - "ALTER TABLE {{ this }} ADD UNIQUE (value)"
