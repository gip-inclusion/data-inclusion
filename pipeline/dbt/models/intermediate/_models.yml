version: 2

models:
  - name: int__union_adresses
    data_tests:
      - check_adresse:
          include:
            - _di_surrogate_id
          config:
            severity: warn

  - name: int__union_contacts
    columns:
      - name: courriel
        data_tests:
          - dbt_utils.not_empty_string

  - name: int__union_services
    data_tests:
      - check_service:
          include:
            - _di_surrogate_id
          config:
            severity: warn

  - name: int__union_structures
    data_tests:
      - check_structure:
          include:
            - _di_surrogate_id
          config:
            severity: warn

  - name: int__union_adresses__enhanced

  - name: int__union_contacts__enhanced
    columns:
      - name: _di_surrogate_id
      - name: id
      - name: source
      - name: contact_nom_prenom
      - name: courriel
      - name: telephone
      - name: rgpd_notice_was_objected_to
      - name: rgpd_notice_has_hardbounced

  - name: int__union_services__enhanced
    columns:
      - name: zone_diffusion_code
        data_tests:
          - not_null:
              config:
                severity: warn
          - dbt_utils.not_empty_string
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: "!~ '^(751|693|132)'"
              config:
                severity: warn
          - relationships:
              to: ref('stg_decoupage_administratif__regions')
              field: code
              where: "zone_diffusion_type = 'region'"
            # TODO(vmttn): prevent false codes from being propagated downstream
            # and set back severity to error
              config:
                severity: warn
          - relationships:
              to: ref('stg_decoupage_administratif__departements')
              field: code
              where: "zone_diffusion_type = 'departement'"
              config:
                severity: warn
          - relationships:
              to: ref('stg_decoupage_administratif__epcis')
              field: code
              where: "zone_diffusion_type = 'epci'"
              config:
                severity: warn
          - relationships:
              to: ref('stg_decoupage_administratif__communes')
              field: code
              where: "zone_diffusion_type = 'commune'"
              config:
                severity: warn

  - name: int__union_structures__enhanced

  - name: int__geocodages
    description: |
      This model is incremental, it will only geocode new or changed addresses.
      It stores raw geocoding results, without filtering.
      Geocoding is done by calling the BAN api in PL/Python.
    columns:
      - name: geocoded_at
        data_tests:
          - not_null
      - name: adresse_id
        data_tests:
          - unique
          - not_null
          - relationships:
              to: ref('int__union_adresses')
              field: _di_surrogate_id
      - name: input_adresse
      - name: input_code_insee
      - name: input_code_postal
      - name: input_commune
      - name: commune
        data_tests:
          - dbt_utils.not_empty_string
      - name: adresse
        data_tests:
          - dbt_utils.not_empty_string
      - name: code_postal
        data_tests:
          - dbt_utils.not_empty_string
      - name: code_commune
        data_tests:
          - dbt_utils.not_empty_string
          - relationships:
              to: ref('stg_decoupage_administratif__communes')
              field: code
      - name: code_arrondissement
        data_tests:
          - dbt_utils.not_empty_string
          - relationships:
              to: ref('stg_decoupage_administratif__arrondissements')
              field: code
      - name: latitude
      - name: longitude
      - name: score
        data_tests:
          - not_null:
              config:
                severity: warn
      - name: type
        data_tests:
          - not_null:
              config:
                severity: warn
          - accepted_values:
              values:
                - housenumber
                - street
                - locality
                - municipality

  - name: int__criteres_qualite
    description: |
      Quality criteria scorings for services from all sources.
      Each row holds a single criterion score for a service.
      For a given service, there is as many rows as defined criteria.
      A null score means the criterion is not applicable to the service.
      Scoring is done by data-inclusion-schema scoring api in PL/Python.
    columns:
      - name: service_id
        data_tests:
          - not_null
          - relationships:
              to: ref('int__union_services')
              field: _di_surrogate_id
      - name: nom_critere
        description: Name of the criterion.
        data_tests:
          - not_null
          - dbt_utils.not_empty_string
      - name: score_critere
        description: |
          Score for the given criterion and the given service, between 0 and 1.
      - name: score_ligne
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1

  - name: int__courriels_personnels
    columns:
      - name: courriel
        data_tests:
          - not_null
          - dbt_utils.not_empty_string

unit_tests:
  - name: test_courriels_personnels
    model: int__courriels_personnels
    given:
      - input: ref('int__union_contacts')
        rows:
          - {courriel: jean.valjean@wanadoo.fr}
          - {courriel: contact@arpejeha.com}
          - {courriel: savoirspoursensortirparis@orange.fr}
      - input: ref('stg_insee__prenoms')
        rows:
          - {prenom: jean}
    expect:
      rows:
        - {courriel: jean.valjean@wanadoo.fr}

  - name: test_geocodages_full_refresh_mode
    model: int__geocodages
    overrides:
      macros:
        is_incremental: false
    given:
      - input: ref('int__union_adresses')
        rows:
          - {_di_surrogate_id: foo, adresse: 17 rue Malus, commune: Lille, code_postal: 59000, code_insee: 59350}
    expect:
      rows:
        - {adresse_id: foo}

  - name: test_geocodages_incremental_mode
    # - row `unchanged` was previously geocoded and has not changed. It must not be re-geocoded.
    # - row `failed` was previously geocoded but failed. It must be re-geocoded.
    # - rows `changed-<INPUT>` were previously geocoded, but INPUT have changed. They must be re-geocoded.
    # - row `new` was not previously geocoded. It must be geocoded.
    model: int__geocodages
    description: |
      Test that geocoding is incremental
    overrides:
      macros:
        is_incremental: true
    given:
      - input: ref('int__union_adresses')
        rows:
          - {_di_surrogate_id: unchanged, adresse: 17 rue Malus, code_postal: 59000, code_insee: 59350, commune: Lille}
          - {_di_surrogate_id: failed, adresse: 17 rue Malus, code_postal: 59000, code_insee: 59350, commune: Lille}
          - {_di_surrogate_id: changed-adresse, adresse: changed, code_postal: 59000, code_insee: 59350, commune: Lille}
          - {_di_surrogate_id: changed-code-postal, adresse: 17 rue Malus, code_postal: changed, code_insee: 59350, commune: Lille}
          - {_di_surrogate_id: changed-code-insee, adresse: 17 rue Malus, code_postal: 59000, code_insee: changed, commune: Lille}
          - {_di_surrogate_id: changed-commune, adresse: 17 rue Malus, code_postal: 59000, code_insee: 59350, commune: changed}
          - {_di_surrogate_id: new, adresse: 17 rue Malus, code_postal: 59000, code_insee: 59350, commune: Lille}
      - input: this
        rows:
          - {adresse_id: unchanged, input_adresse: 17 rue Malus, input_code_postal: 59000, input_code_insee: 59350, input_commune: Lille, score: 1}
          - {adresse_id: failed, input_adresse: 17 rue Malus, input_code_postal: 59000, input_code_insee: 59350, input_commune: Lille, score: null}
          - {adresse_id: changed-adresse, input_adresse: 17 rue Malus, input_code_postal: 59000, input_code_insee: 59350, input_commune: Lille, score: 1}
          - {adresse_id: changed-code-postal, input_adresse: 17 rue Malus, input_code_postal: 59000, input_code_insee: 59350, input_commune: Lille, score: 1}
          - {adresse_id: changed-code-insee, input_adresse: 17 rue Malus, input_code_postal: 59000, input_code_insee: 59350, input_commune: Lille, score: 1}
          - {adresse_id: changed-commune, input_adresse: 17 rue Malus, input_code_postal: 59000, input_code_insee: 59350, input_commune: Lille, score: 1}
    expect:
      rows:
        - {adresse_id: failed}
        - {adresse_id: changed-adresse}
        - {adresse_id: changed-code-postal}
        - {adresse_id: changed-code-insee}
        - {adresse_id: changed-commune}
        - {adresse_id: new}

  - name: test_contacts_enhanced_hardbounce_and_objected_to
    model: int__union_contacts__enhanced
    given:
      - input: ref('int__union_contacts')
        rows:
          - {"source": "dora", "id": "foo", "courriel": "truc1@toto.at", "contact_nom_prenom": "Jean Valjean", "telephone": "0123456789"}
          - {"source": "other", "id": "foo", "courriel": "truc1@toto.at", "contact_nom_prenom": "Jean Other", "telephone": "9876543210"}
          - {"source": "mednum", "id": "bar", "courriel": "truc2@toto.at", "contact_nom_prenom": "Jean Valjean", "telephone": "0123456789"}
          - {"source": "lezemplois", "id": "baz", "courriel": "truc3@toto.at", "contact_nom_prenom": "Jean Valjean", "telephone": "0123456789"}
          - {"source": "autre", "id": "solo", "courriel": "solo@autre.net", "contact_nom_prenom": "Autre Personne", "telephone": "06666666"}
      - input: ref('int_brevo__contacts')
        rows:
          # note: values can't be NULL. has_hardbounced is set to true/false by brevo, and was_objected to is set to true/false by us.
          - {"courriel": "truc1@toto.at", "has_hardbounced": true, "was_objected_to": true}
          - {"courriel": "truc2@toto.at", "has_hardbounced": false, "was_objected_to": true}
          - {"courriel": "truc3@toto.at", "has_hardbounced": false, "was_objected_to": false}
          - {"courriel": "solo@autre.net", "has_hardbounced": true, "was_objected_to": false}
    expect:
      rows:
        - {source: dora, id: foo, courriel: NULL, contact_nom_prenom: NULL, telephone: NULL}  # objected to, hardbounce
        - {source: other, id: foo, courriel: NULL, contact_nom_prenom: NULL, telephone: NULL}  # objected to, hardbounce
        - {source: mednum, id: bar, courriel: NULL, contact_nom_prenom: NULL, telephone: NULL}  # objected to, no hardbounce
        - {source: lezemplois, id: baz, courriel: truc3@toto.at, contact_nom_prenom: Jean Valjean, telephone: '0123456789'} # not objected to, no hardbounce
        - {source: autre, id: solo, courriel: NULL, contact_nom_prenom: Autre Personne, telephone: '06666666'} # hardbounce : only email is hidden
