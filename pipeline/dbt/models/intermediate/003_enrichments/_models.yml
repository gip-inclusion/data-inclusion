version: 2

models:
  - name: int__contacts
    columns:
      - name: _di_surrogate_id
      - name: id
      - name: source
      - name: contact_nom_prenom
      - name: courriel
      - name: telephone
      - name: rgpd_notice_was_objected_to
      - name: rgpd_notice_has_hardbounced

  - name: int__geocodages
    description: |
      This model is incremental, it will only geocode new or changed addresses.
      It stores raw geocoding results, without filtering.
      Geocoding is done by calling the BAN api in PL/Python.
    columns:
      - name: geocoded_at
        data_tests:
          - not_null
      - name: adresse_id
        data_tests:
          - unique
          - not_null
          - relationships:
              to: ref('int__union_adresses')
              field: _di_surrogate_id
      - name: input_adresse
      - name: input_code_insee
      - name: input_code_postal
      - name: input_commune
      - name: commune
        data_tests:
          - dbt_utils.not_empty_string
      - name: adresse
        data_tests:
          - dbt_utils.not_empty_string
      - name: code_postal
        data_tests:
          - dbt_utils.not_empty_string
      - name: code_commune
        data_tests:
          - dbt_utils.not_empty_string
          - relationships:
              to: ref('stg_decoupage_administratif__communes')
              field: code
              # FIXME: temporarily disabled, as the ban api returns
              # codes that are not the decoupage administratif codes
              config:
                error_if: "> 1000"
      - name: code_arrondissement
        data_tests:
          - dbt_utils.not_empty_string
          - relationships:
              to: ref('stg_decoupage_administratif__arrondissements')
              field: code
      - name: latitude
      - name: longitude
      - name: score
        data_tests:
          - not_null:
              config:
                severity: warn
      - name: type
        data_tests:
          - not_null:
              config:
                severity: warn
          - accepted_values:
              values:
                - housenumber
                - street
                - locality
                - municipality

  - name: int__courriels_personnels
    columns:
      - name: courriel
        data_tests:
          - not_null
          - dbt_utils.not_empty_string

  - name: int__courriels_verifies
    columns:
      - name: courriel
        description: |
          A validated version of the email address. It has been trimmed, lowercased, unescaped, and
          for most of them an email has been sent to ensure deliverability and approval of its exposure.
        data_tests:
          - not_null
          - unique
          - dbt_utils.not_empty_string
      - name: has_hardbounced
        description: |
          Derived from Brevo API's GetContactDetails.email_blacklisted field, returned by the get_contacts endpoint.
          Cf. https://help.brevo.com/hc/en-us/articles/209458705-FAQs-What-are-the-different-types-of-blocklisted-contacts
          Actually combines those different reasons for blocklisting:
          - has hardbounced, or
          - has unsubscribed, or
          - has marked the campaign email as spam, or
          - we, data⋅inclusion, have blocklisted them.
          It has been discussed internally in 2024 and we assumed that in all these cases, we would hide the e-mail in data⋅inclusion.
        data_tests:
          - accepted_values:
              values: [true, false]
      - name: was_objected_to
        description: |
          Permet de savoir si le contact a fait l'objet d'une demande de retrait RGPD.
        data_tests:
          - accepted_values:
              values: [true, false]

  - name: int__urls
    description: |
      Contains the validation statuses, eventual error messages, and attempts for each URL
      for which we attempted a validation.
    columns:
      - name: last_checked_at
        description: |
          Date of the last URL check.
          It is updated each time the URL is verified.
      - name: input_url
        description: |
          Contains the original URL to validate.
          It can be a URL of type:
          - http://www.example.com
          - www.example.com
          - ftp://ftp.example.com
          - Completely invalid URL
        data_tests:
          - not_null
          - dbt_utils.not_empty_string
          - unique
      - name: url
        description: |
          Contains the validated and corrected URL if possible.
          This URL complies with RFC 3986 standard and is possibly obtained after a redirection
          during the HTTP GET validation call.
        data_tests:
          - not_null
          - dbt_utils.not_empty_string
          - dbt_utils.not_constant
      - name: status_code
        description: |
          Contains a status code which is:
          - either an HTTP code (200, 301, 302, 404, 500, etc.)
          - or 0 if the URL is syntactically invalid
          - or -1 if the URL is not accessible (refused connection, SSL error, etc.)
          - or -2 if a timeout was encountered.
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: -2
              max_value: 999
      - name: error_message
        description: |
          Contains a message describing the validation error encountered.
          It can contain error messages such as:
          - refused connection
          - SSL error
          - timeout
        data_tests:
          - dbt_utils.not_empty_string
      - name: attempt_count
        description: |
          Number of attempts made to validate the URL.
          URL tests are performed again (status_code < 0) within the limit of N attempts.
          This is useful to retry on errors like site not accessible (timeout) or temporary
          unavailability (refused connection, SSL error, etc.).
          URLs are also tested again after a fixed time interval (e.g., 1 month)
          After each successful "ping", the counter is reset to 1.
        data_tests:
          - not_null

unit_tests:
  - name: test_courriels_personnels
    model: int__courriels_personnels
    given:
      - input: ref('int__union_contacts')
        rows:
          - {courriel: jean.valjean@wanadoo.fr}
          - {courriel: contact@arpejeha.com}
          - {courriel: savoirspoursensortirparis@orange.fr}
      - input: ref('stg_insee__prenoms')
        rows:
          - {prenom: jean}
    expect:
      rows:
        - {courriel: jean.valjean@wanadoo.fr}

  - name: test_geocodages_full_refresh_mode
    model: int__geocodages
    overrides:
      macros:
        is_incremental: false
    given:
      - input: ref('int__union_adresses')
        rows:
          - {_di_surrogate_id: foo, adresse: 17 rue Malus, commune: Lille, code_postal: 59000, code_insee: 59350}
      - input: ref('stg_decoupage_administratif__communes')
        format: sql
        rows: |
          SELECT
           '59350' AS code,
           'Lille' AS nom,
           ARRAY['59000'] AS codes_postaux,
           '59' AS code_departement,
           '23' AS code_region,
           ST_GEOMFROMGEOJSON('{"type":"Point","coordinates":[4.9306,46.1517]}') AS centre
    expect:
      rows:
        - {adresse_id: foo}


  - name: test_geocodages_incremental_mode
    # - row `unchanged` was previously geocoded and has not changed. It must not be re-geocoded.
    # - row `failed` was previously geocoded but failed. It must be re-geocoded.
    # - rows `changed-<INPUT>` were previously geocoded, but INPUT have changed. They must be re-geocoded.
    # - row `new` was not previously geocoded. It must be geocoded.
    model: int__geocodages
    description: |
      Test that geocoding is incremental
    overrides:
      macros:
        is_incremental: true
    given:
      - input: ref('int__union_adresses')
        rows:
          - {_di_surrogate_id: unchanged, adresse: 17 rue Malus, code_postal: 59000, code_insee: 59350, commune: Lille}
          - {_di_surrogate_id: failed, adresse: 17 rue Malus, code_postal: 59000, code_insee: 59350, commune: Lille}
          - {_di_surrogate_id: changed-adresse, adresse: 17 rue Malus, code_postal: 59000, code_insee: 59350, commune: Lille}
          - {_di_surrogate_id: changed-code-postal, adresse: 17 rue Malus, code_postal: changed, code_insee: 59350, commune: Lille}
          - {_di_surrogate_id: changed-code-insee, adresse: 17 rue Malus, code_postal: 59000, code_insee: changed, commune: Lille}
          - {_di_surrogate_id: changed-commune, adresse: 17 rue Malus, code_postal: 59000, code_insee: 59350, commune: changed}
          - {_di_surrogate_id: new, adresse: 17 rue Malus, code_postal: 59000, code_insee: 59350, commune: Lille}
      - input: ref('stg_decoupage_administratif__communes')
        format: sql
        rows: |
          SELECT
           '59350' AS code,
           'Lille' AS nom,
           ARRAY['59000', 'changed'] AS codes_postaux,
           '59' AS code_departement,
           '23' AS code_region,
           ST_GEOMFROMGEOJSON('{"type":"Point","coordinates":[4.9306,46.1517]}') AS centre
      - input: this
        rows:
          - {adresse_id: unchanged, input_adresse: 17 rue Malus, input_code_postal: 59000, input_code_insee: 59350, input_commune: Lille, score: 1}
          - {adresse_id: failed, input_adresse: 17 rue Malus, input_code_postal: 59000, input_code_insee: 59350, input_commune: Lille, score: null}
          - {adresse_id: changed-adresse, input_adresse: to be changed, input_code_postal: 59000, input_code_insee: 59350, input_commune: Lille, score: 1}
          - {adresse_id: changed-code-postal, input_adresse: 17 rue Malus, input_code_postal: 59000, input_code_insee: 59350, input_commune: Lille, score: 1}
          - {adresse_id: changed-code-insee, input_adresse: 17 rue Malus, input_code_postal: 59000, input_code_insee: 59350, input_commune: Lille, score: 1}
          - {adresse_id: changed-commune, input_adresse: 17 rue Malus, input_code_postal: 59000, input_code_insee: 59350, input_commune: Lille, score: 1}
    expect:
      rows:
        - {adresse_id: failed}
        - {adresse_id: changed-adresse}
        - {adresse_id: changed-code-postal}
        - {adresse_id: changed-code-insee}
        - {adresse_id: changed-commune}
        - {adresse_id: new}

  - name: test_contacts_hardbounce_and_objected_to
    model: int__contacts
    given:
      - input: ref('int__union_contacts')
        rows:
          - {"source": "dora", "id": "foo", "courriel": "truc1@toto.at", "contact_nom_prenom": "Jean Valjean", "telephone": "0123456789"}
          - {"source": "other", "id": "foo", "courriel": "truc1@toto.at", "contact_nom_prenom": "Jean Other", "telephone": "0123456789"}
          - {"source": "mednum", "id": "bar", "courriel": "truc2@toto.at", "contact_nom_prenom": "Jean Valjean", "telephone": "0123456789"}
          - {"source": "lezemplois", "id": "baz", "courriel": "truc3@toto.at", "contact_nom_prenom": "Jean Valjean", "telephone": "0123456789"}
          - {"source": "autre", "id": "solo", "courriel": "solo@autre.net", "contact_nom_prenom": "Autre Personne", "telephone": "0123456789"}
          - {"source": "tel", "id": "fredo_gate", "courriel": NULL, "contact_nom_prenom": "Autre Personne", "telephone": "0123456789"}
          - {"source": "tel_malformat", "id": "tel", "courriel": NULL, "contact_nom_prenom": "Autre Personne", "telephone": "06606060"}
      - input: ref('int__courriels_verifies')
        rows:
          # note: values can't be NULL. has_hardbounced is set to true/false by brevo, and was_objected to is set to true/false by us.
          - {"courriel": "truc1@toto.at", "has_hardbounced": true, "was_objected_to": true}
          - {"courriel": "truc2@toto.at", "has_hardbounced": false, "was_objected_to": true}
          - {"courriel": "truc3@toto.at", "has_hardbounced": false, "was_objected_to": false}
          - {"courriel": "solo@autre.net", "has_hardbounced": true, "was_objected_to": false}
    expect:
      rows:
        - {source: dora, id: foo, courriel: NULL, contact_nom_prenom: NULL, telephone: NULL}  # objected to, hardbounce
        - {source: other, id: foo, courriel: NULL, contact_nom_prenom: NULL, telephone: NULL}  # objected to, hardbounce
        - {source: mednum, id: bar, courriel: NULL, contact_nom_prenom: NULL, telephone: NULL}  # objected to, no hardbounce
        - {source: lezemplois, id: baz, courriel: truc3@toto.at, contact_nom_prenom: Jean Valjean, telephone: '+33123456789'} # not objected to, no hardbounce
        - {source: autre, id: solo, courriel: NULL, contact_nom_prenom: Autre Personne, telephone: '+33123456789'} # hardbounce : only email is hidden
        - {source: tel, id: fredo_gate, courriel: NULL, contact_nom_prenom: Autre Personne, telephone: '+33123456789'} # if email is NULL, we keep the phone number and the contact name
        - {source: tel_malformat, id: tel, courriel: NULL, contact_nom_prenom: Autre Personne, telephone: NULL} # if phone number is not valid, we set it to NULL

  - name: test_urls_full_refresh_1_item
    model: int__urls
    overrides:
      vars:
        check_urls_batch_size: 1
      macros:
        is_incremental: false
    given:
      - input: ref('int__union_urls')
        rows:
          - {url: www.google.com}
          - {url: http://facebook.com}
          - {url: cecinestpasunsiteweb}
          - {url: https://ce.site.nexiste.pas}
    expect:
      rows:
        - input_url: www.google.com
          status_code: 200
          attempt_count: 1
          url: https://www.google.com/

  - name: test_urls_full_refresh
    model: int__urls
    overrides:
      vars:
        check_urls_batch_size: 5
      macros:
        is_incremental: false
    given:
      - input: ref('int__union_urls')
        rows:
          - {url: www.google.com}
          - {url: http://facebook.com}
          - {url: cecinestpasunsiteweb}
          - {url: https://ce.site.nexiste.pas}
          - {url: https://httpbin.org/delay/10}
    expect:
      rows:
        - input_url: https://ce.site.nexiste.pas
          status_code: -1
          attempt_count: 1
          url: https://ce.site.nexiste.pas
        - input_url: www.google.com
          status_code: 200
          attempt_count: 1
          url: https://www.google.com/
        - input_url: cecinestpasunsiteweb
          status_code: -1
          attempt_count: 1
          url: https://cecinestpasunsiteweb
        - input_url: http://facebook.com
          status_code: 200
          attempt_count: 1
          url: https://www.facebook.com/
        - input_url: https://httpbin.org/delay/10
          status_code: -2
          attempt_count: 1
          url: https://httpbin.org/delay/10
