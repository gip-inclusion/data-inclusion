[2025-05-07T14:48:59.690+0000] {dagbag.py:588} INFO - Filling up the DagBag from /opt/airflow/dags
[2025-05-07T14:48:59.935+0000] {dag.py:4435} INFO - dagrun id: import_sirene
[2025-05-07T14:48:59.944+0000] {dag.py:4451} INFO - created dagrun <DagRun import_sirene @ 2025-05-07 14:48:59.689915+00:00: manual__2025-05-07T14:48:59.689915+00:00, state:running, queued_at: None. externally triggered: False>
[2025-05-07T14:48:59.962+0000] {dag.py:4396} INFO - [DAG TEST] starting task_id=start map_index=-1
[2025-05-07T14:48:59.962+0000] {dag.py:4399} INFO - [DAG TEST] running task <TaskInstance: import_sirene.start manual__2025-05-07T14:48:59.689915+00:00 [scheduled]>
[2025-05-07 14:49:00,303] {taskinstance.py:3134} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='airflow' AIRFLOW_CTX_DAG_ID='import_sirene' AIRFLOW_CTX_TASK_ID='start' AIRFLOW_CTX_EXECUTION_DATE='2025-05-07T14:48:59.689915+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-05-07T14:48:59.689915+00:00'
[2025-05-07T14:49:00.303+0000] {taskinstance.py:3134} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='airflow' AIRFLOW_CTX_DAG_ID='import_sirene' AIRFLOW_CTX_TASK_ID='start' AIRFLOW_CTX_EXECUTION_DATE='2025-05-07T14:48:59.689915+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-05-07T14:48:59.689915+00:00'
[2025-05-07T14:49:00.304+0000] {taskinstance.py:732} INFO - ::endgroup::
[2025-05-07T14:49:00.307+0000] {taskinstance.py:341} INFO - ::group::Post task execution logs
[2025-05-07T14:49:00.307+0000] {taskinstance.py:353} INFO - Marking task as SUCCESS. dag_id=import_sirene, task_id=start, run_id=manual__2025-05-07T14:48:59.689915+00:00, execution_date=20250507T144859, start_date=, end_date=20250507T144900
[2025-05-07T14:49:00.315+0000] {dag.py:4410} INFO - [DAG TEST] end task task_id=start map_index=-1
[2025-05-07T14:49:00.324+0000] {dag.py:4396} INFO - [DAG TEST] starting task_id=import_stock_etablissement_historique map_index=-1
[2025-05-07T14:49:00.324+0000] {dag.py:4399} INFO - [DAG TEST] running task <TaskInstance: import_sirene.import_stock_etablissement_historique manual__2025-05-07T14:48:59.689915+00:00 [scheduled]>
[2025-05-07 14:49:00,337] {taskinstance.py:3134} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='airflow' AIRFLOW_CTX_DAG_ID='import_sirene' AIRFLOW_CTX_TASK_ID='import_stock_etablissement_historique' AIRFLOW_CTX_EXECUTION_DATE='2025-05-07T14:48:59.689915+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-05-07T14:48:59.689915+00:00'
[2025-05-07T14:49:00.337+0000] {taskinstance.py:3134} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='airflow' AIRFLOW_CTX_DAG_ID='import_sirene' AIRFLOW_CTX_TASK_ID='import_stock_etablissement_historique' AIRFLOW_CTX_EXECUTION_DATE='2025-05-07T14:48:59.689915+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-05-07T14:48:59.689915+00:00'
[2025-05-07T14:49:00.337+0000] {taskinstance.py:732} INFO - ::endgroup::
[2025-05-07 14:49:00,543] {baseoperator.py:423} WARNING - ExternalPythonOperator.execute cannot be called outside TaskInstance!
[2025-05-07T14:49:00.543+0000] {baseoperator.py:423} WARNING - ExternalPythonOperator.execute cannot be called outside TaskInstance!
[2025-05-07T14:49:00.557+0000] {process_utils.py:186} INFO - Executing cmd: /opt/airflow/venvs/python/venv/bin/python /tmp/venv-callnafp1l13/script.py /tmp/venv-callnafp1l13/script.in /tmp/venv-callnafp1l13/script.out /tmp/venv-callnafp1l13/string_args.txt /tmp/venv-callnafp1l13/termination.log
[2025-05-07T14:49:00.558+0000] {process_utils.py:190} INFO - Output:
[2025-05-07T14:49:01.539+0000] {process_utils.py:194} INFO - Traceback (most recent call last):
[2025-05-07T14:49:01.539+0000] {process_utils.py:194} INFO -   File "/tmp/venv-callnafp1l13/script.py", line 84, in <module>
[2025-05-07T14:49:01.540+0000] {process_utils.py:194} INFO -     res = _import_stock_etablissement_historique(*arg_dict["args"], **arg_dict["kwargs"])
[2025-05-07T14:49:01.540+0000] {process_utils.py:194} INFO -           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[2025-05-07T14:49:01.540+0000] {process_utils.py:194} INFO -   File "/tmp/venv-callnafp1l13/script.py", line 26, in _import_stock_etablissement_historique
[2025-05-07T14:49:01.540+0000] {process_utils.py:194} INFO -     raise KeyError("forced error")
[2025-05-07T14:49:01.540+0000] {process_utils.py:194} INFO - KeyError: 'forced error'
[2025-05-07 14:49:01,650] {taskinstance.py:3313} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 768, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 734, in _execute_callable
    return ExecutionCallableRunner(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/operator_helpers.py", line 252, in run
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 424, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 505, in execute
    return super().execute(context=serializable_context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 424, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 238, in execute
    return_value = self.execute_callable()
                   ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 1024, in execute_callable
    return self._execute_python_callable_in_subprocess(python_path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 588, in _execute_python_callable_in_subprocess
    raise AirflowException(error_msg) from None
airflow.exceptions.AirflowException: Process returned non-zero exit status 1.
'forced error'
[2025-05-07T14:49:01.650+0000] {taskinstance.py:3313} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 768, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 734, in _execute_callable
    return ExecutionCallableRunner(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/operator_helpers.py", line 252, in run
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 424, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 505, in execute
    return super().execute(context=serializable_context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 424, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 238, in execute
    return_value = self.execute_callable()
                   ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 1024, in execute_callable
    return self._execute_python_callable_in_subprocess(python_path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 588, in _execute_python_callable_in_subprocess
    raise AirflowException(error_msg) from None
airflow.exceptions.AirflowException: Process returned non-zero exit status 1.
'forced error'
[2025-05-07T14:49:01.652+0000] {taskinstance.py:1226} INFO - Marking task as FAILED. dag_id=import_sirene, task_id=import_stock_etablissement_historique, run_id=manual__2025-05-07T14:48:59.689915+00:00, execution_date=20250507T144859, start_date=20250507T144900, end_date=20250507T144901
[2025-05-07T14:49:01.652+0000] {taskinstance.py:1564} INFO - Executing callback at index 0: fill_sentry_scope
[2025-05-07T14:49:01.661+0000] {taskinstance.py:341} INFO - ::group::Post task execution logs
{'_meta': {'breadcrumbs': {'values': {'100': {'message': {'': {'len': 2941,
                                                               'rem': [['!limit',
                                                                        'x',
                                                                        1021,
                                                                        1024]]}}},
                                      '43': {'message': {'': {'len': 1843,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '44': {'message': {'': {'len': 1887,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '49': {'message': {'': {'len': 1577,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '53': {'message': {'': {'len': 1837,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '54': {'message': {'': {'len': 1670,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '57': {'message': {'': {'len': 1577,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '62': {'message': {'': {'len': 1837,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '66': {'message': {'': {'len': 1577,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '70': {'message': {'': {'len': 1938,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '71': {'message': {'': {'len': 2941,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '75': {'message': {'': {'len': 1333,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '76': {'message': {'': {'len': 3981,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '93': {'message': {'': {'len': 1949,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '94': {'message': {'': {'len': 1938,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}}}},
           'exception': {'values': {'0': {'stacktrace': {'frames': {'0': {'vars': {'session': {'': {'rem': [['!config',
                                                                                                             's']]}}}},
                                                                    '1': {'vars': {'session': {'': {'rem': [['!config',
                                                                                                             's']]}}}},
                                                                    '2': {'vars': {'session': {'': {'rem': [['!config',
                                                                                                             's']]}}}},
                                                                    '3': {'vars': {'session': {'': {'rem': [['!config',
                                                                                                             's']]}}}}}}}}}},
 'breadcrumbs': {'values': [{'category': 'subprocess',
                             'data': {'thread.id': '127776040237952',
                                      'thread.name': 'MainThread'},
                             'message': 'file -b /usr/local/bin/python3.12',
                             'timestamp': '2025-05-07T14:48:59.084599Z',
                             'type': 'subprocess'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.846221Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.866538Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.867443Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.869171Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.869567Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.870983Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.871391Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.872546Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.872929Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.874067Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.874456Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.875790Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.876214Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.877427Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.877815Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.879165Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.879548Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.880780Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.881250Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.882637Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.883040Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.884015Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.884394Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.885752Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.886145Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.887322Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.887722Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.889071Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.890143Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.891647Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.892061Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.893294Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.893742Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.902792Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.903273Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.906294Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.906748Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.907357Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.907734Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.910618Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.911024Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.920472Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:48:59.931551Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:48:59.934504Z',
                             'type': 'default'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:48:59.935+0000'},
                             'level': 'info',
                             'message': 'dagrun id: import_sirene',
                             'timestamp': '2025-05-07T14:48:59.935493Z',
                             'type': 'log'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT dag_run.state, dag_run.id, '
                                        'dag_run.dag_id, dag_run.queued_at, '
                                        'dag_run.execution_date, '
                                        'dag_run.start_date, dag_run.end_date, '
                                        'dag_run.run_id, '
                                        'dag_run.creating_job_id, '
                                        'dag_run.external_trigger, '
                                        'dag_run.run_type, dag_run.conf, '
                                        'dag_run.data_interval_start, '
                                        'dag_run.data_interval_end, '
                                        'dag_run.last_scheduling_decision, '
                                        'dag_run.dag_hash, '
                                        'dag_run.log_template_id, '
                                        'dag_run.updated_at, '
                                        'dag_run.clear_number \n'
                                        'FROM dag_run \n'
                                        'WHERE dag_run.dag_id = %(dag_id_1)s '
                                        'AND dag_run.execution_date = '
                                        '%(execution_date_1)s',
                             'timestamp': '2025-05-07T14:48:59.936343Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT max(log_template.id) AS '
                                        'max_1 \n'
                                        'FROM log_template',
                             'timestamp': '2025-05-07T14:48:59.937559Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'INSERT INTO dag_run (dag_id, '
                                        'queued_at, execution_date, '
                                        'start_date, end_date, state, run_id, '
                                        'creating_job_id, external_trigger, '
                                        'run_type, conf, data_interval_start, '
                                        'data_interval_end, '
                                        'last_scheduling_decision, dag_hash, '
                                        'log_template_id, updated_at, '
                                        'clear_number) VALUES (%(dag_id)s, '
                                        '%(queued_at)s, %(execution_date)s, '
                                        '%(start_date)s, %(end_date)s, '
                                        '%(state)s, %(run_id)s, '
                                        '%(creating_job_id)s, '
                                        '%(external_trigger)s, %(run_type)s, '
                                        '%(conf)s, %(data_interval_start)s, '
                                        '%(data_interval_end)s, '
                                        '%(last_scheduling_decision)s, '
                                        '%(dag_hash)s, %(log_template_id)s, '
                                        '%(updated_at)s, %(clear_number)s) '
                                        'RETURNING dag_run.id',
                             'timestamp': '2025-05-07T14:48:59.938776Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:48:59.940994Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {'db.executemany': True},
                             'message': 'INSERT INTO task_instance (task_id, '
                                        'dag_id, run_id, map_index, '
                                        'try_number, max_tries, hostname, '
                                        'unixname, pool, pool_slots, queue, '
                                        'priority_weight, operator, '
                                        'executor_config, updated_at, '
                                        'task_display_name) VALUES '
                                        '(%(task_id)s, %(dag_id)s, %(run_id)s, '
                                        '%(map_index)s, %(try_number)s, '
                                        '%(max_tries)s, %(hostname)s, '
                                        '%(unixname)s, %(pool)s, '
                                        '%(pool_slots)s, %(queue)s, '
                                        '%(priority_weight)s, %(operator)s, '
                                        '%(executor_config)s, %(updated_at)s, '
                                        '%(task_display_name)s)',
                             'timestamp': '2025-05-07T14:48:59.942443Z',
                             'type': 'default'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:48:59.944+0000'},
                             'level': 'info',
                             'message': 'created dagrun <DagRun import_sirene '
                                        '@ 2025-05-07 14:48:59.689915+00:00: '
                                        'manual__2025-05-07T14:48:59.689915+00:00, '
                                        'state:running, queued_at: None. '
                                        'externally triggered: False>',
                             'timestamp': '2025-05-07T14:48:59.944413Z',
                             'type': 'log'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT dag_run.state AS '
                                        'dag_run_state, dag_run.id AS '
                                        'dag_run_id, dag_run.dag_id AS '
                                        'dag_run_dag_id, dag_run.queued_at AS '
                                        'dag_run_queued_at, '
                                        'dag_run.execution_date AS '
                                        'dag_run_execution_date, '
                                        'dag_run.start_date AS '
                                        'dag_run_start_date, dag_run.end_date '
                                        'AS dag_run_end_date, dag_run.run_id '
                                        'AS dag_run_run_id, '
                                        'dag_run.creating_job_id AS '
                                        'dag_run_creating_job_id, '
                                        'dag_run.external_trigger AS '
                                        'dag_run_external_trigger, '
                                        'dag_run.run_type AS dag_run_run_type, '
                                        'dag_run.conf AS dag_run_conf, '
                                        'dag_run.data_interval_start AS '
                                        'dag_run_data_interval_start, '
                                        'dag_run.data_interval_end AS '
                                        'dag_run_data_interval_end, '
                                        'dag_run.dag_hash AS dag_run_dag_hash, '
                                        'dag_run.log_template_id AS '
                                        'dag_run_log_template_id, '
                                        'dag_run.updated_at AS '
                                        'dag_run_updated_at, '
                                        'dag_run.clear_number AS '
                                        'dag_run_clear_number \n'
                                        'FROM dag_run \n'
                                        'WHERE dag_run.id = %(pk_1)s',
                             'timestamp': '2025-05-07T14:48:59.946065Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:48:59.947853Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:48:59.950093Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'UPDATE dag_run SET '
                                        'last_scheduling_decision=%(last_scheduling_decision)s, '
                                        'updated_at=%(updated_at)s WHERE '
                                        'dag_run.id = %(dag_run_id)s',
                             'timestamp': '2025-05-07T14:48:59.951571Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'UPDATE task_instance SET '
                                        'state=%(state)s, '
                                        'try_number=%(try_number)s, '
                                        'updated_at=%(updated_at)s WHERE '
                                        'task_instance.dag_id = '
                                        '%(task_instance_dag_id)s AND '
                                        'task_instance.task_id = '
                                        '%(task_instance_task_id)s AND '
                                        'task_instance.run_id = '
                                        '%(task_instance_run_id)s AND '
                                        'task_instance.map_index = '
                                        '%(task_instance_map_index)s',
                             'timestamp': '2025-05-07T14:48:59.952375Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:48:59.956269Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT job.id, job.dag_id, job.state, '
                                        'job.job_type, job.start_date, '
                                        'job.end_date, job.latest_heartbeat, '
                                        'job.executor_class, job.hostname, '
                                        'job.unixname \n'
                                        'FROM job \n'
                                        'WHERE job.job_type = %(job_type_1)s '
                                        'ORDER BY CASE job.state WHEN '
                                        '%(param_1)s THEN %(param_2)s ELSE '
                                        '%(param_3)s END, job.latest_heartbeat '
                                        'DESC \n'
                                        ' LIMIT %(param_4)s',
                             'timestamp': '2025-05-07T14:48:59.961763Z',
                             'type': 'default'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:48:59.962+0000'},
                             'level': 'info',
                             'message': '[DAG TEST] starting task_id=start '
                                        'map_index=-1',
                             'timestamp': '2025-05-07T14:48:59.962444Z',
                             'type': 'log'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:48:59.962+0000'},
                             'level': 'info',
                             'message': '[DAG TEST] running task '
                                        '<TaskInstance: import_sirene.start '
                                        'manual__2025-05-07T14:48:59.689915+00:00 '
                                        '[scheduled]>',
                             'timestamp': '2025-05-07T14:48:59.962634Z',
                             'type': 'log'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:49:00.315+0000'},
                             'level': 'info',
                             'message': '[DAG TEST] end task task_id=start '
                                        'map_index=-1',
                             'timestamp': '2025-05-07T14:49:00.315815Z',
                             'type': 'log'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:49:00.316767Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT xcom.run_id AS xcom_run_id, '
                                        'xcom.task_id AS xcom_task_id, '
                                        'xcom.dag_id AS xcom_dag_id, '
                                        'xcom.map_index AS xcom_map_index, '
                                        'xcom.value AS xcom_value \n'
                                        'FROM xcom JOIN dag_run ON '
                                        'xcom.dag_run_id = dag_run.id \n'
                                        'WHERE xcom.key = %(key_1)s AND '
                                        'xcom.task_id = %(task_id_1)s AND '
                                        'xcom.dag_id = %(dag_id_1)s AND '
                                        'xcom.map_index = %(map_index_1)s AND '
                                        'xcom.run_id = %(run_id_1)s ORDER BY '
                                        'dag_run.execution_date DESC, '
                                        'xcom.timestamp DESC \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:49:00.319298Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'UPDATE dag_run SET '
                                        'last_scheduling_decision=%(last_scheduling_decision)s, '
                                        'updated_at=%(updated_at)s WHERE '
                                        'dag_run.id = %(dag_run_id)s',
                             'timestamp': '2025-05-07T14:49:00.320252Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'UPDATE task_instance SET '
                                        'state=%(state)s, '
                                        'try_number=%(try_number)s, '
                                        'updated_at=%(updated_at)s WHERE '
                                        'task_instance.dag_id = '
                                        '%(task_instance_dag_id)s AND '
                                        'task_instance.task_id = '
                                        '%(task_instance_task_id)s AND '
                                        'task_instance.run_id = '
                                        '%(task_instance_run_id)s AND '
                                        'task_instance.map_index = '
                                        '%(task_instance_map_index)s',
                             'timestamp': '2025-05-07T14:49:00.320801Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:49:00.322816Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT job.id, job.dag_id, job.state, '
                                        'job.job_type, job.start_date, '
                                        'job.end_date, job.latest_heartbeat, '
                                        'job.executor_class, job.hostname, '
                                        'job.unixname \n'
                                        'FROM job \n'
                                        'WHERE job.job_type = %(job_type_1)s '
                                        'ORDER BY CASE job.state WHEN '
                                        '%(param_1)s THEN %(param_2)s ELSE '
                                        '%(param_3)s END, job.latest_heartbeat '
                                        'DESC \n'
                                        ' LIMIT %(param_4)s',
                             'timestamp': '2025-05-07T14:49:00.323606Z',
                             'type': 'default'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:49:00.324+0000'},
                             'level': 'info',
                             'message': '[DAG TEST] starting '
                                        'task_id=import_stock_etablissement_historique '
                                        'map_index=-1',
                             'timestamp': '2025-05-07T14:49:00.324144Z',
                             'type': 'log'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:49:00.324+0000'},
                             'level': 'info',
                             'message': '[DAG TEST] running task '
                                        '<TaskInstance: '
                                        'import_sirene.import_stock_etablissement_historique '
                                        'manual__2025-05-07T14:48:59.689915+00:00 '
                                        '[scheduled]>',
                             'timestamp': '2025-05-07T14:49:00.324339Z',
                             'type': 'log'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name AS '
                                        'task_instance_task_display_name, '
                                        'task_instance.task_id AS '
                                        'task_instance_task_id, '
                                        'task_instance.dag_id AS '
                                        'task_instance_dag_id, '
                                        'task_instance.run_id AS '
                                        'task_instance_run_id, '
                                        'task_instance.map_index AS '
                                        'task_instance_map_index, '
                                        'task_instance.start_date AS '
                                        'task_instance_start_date, '
                                        'task_instance.end_date AS '
                                        'task_instance_end_date, '
                                        'task_instance.duration AS '
                                        'task_instance_duration, '
                                        'task_instance.state AS '
                                        'task_instance_state, '
                                        'task_instance.try_number AS '
                                        'task_instance_try_number, '
                                        'task_instance.max_tries AS '
                                        'task_instance_max_tries, '
                                        'task_instance.hostname AS '
                                        'task_instance_hostname, '
                                        'task_instance.unixname AS '
                                        'task_instance_unixname, '
                                        'task_instance.job_id AS '
                                        'task_instance_job_id, '
                                        'task_instance.pool AS '
                                        'task_instance_pool, '
                                        'task_instance.pool_slots AS '
                                        'task_instance_pool_slots, '
                                        'task_instance.queue AS '
                                        'task_instance_queue, '
                                        'task_instance.priority_weight AS '
                                        'task_instance_priority_weight, '
                                        'task_instance.operator AS '
                                        'task_instance_operator, '
                                        'task_instance.custom_operator_name AS '
                                        'task_instanc...',
                             'timestamp': '2025-05-07T14:49:00.326012Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name AS '
                                        'task_instance_task_display_name, '
                                        'task_instance.task_id AS '
                                        'task_instance_task_id, '
                                        'task_instance.dag_id AS '
                                        'task_instance_dag_id, '
                                        'task_instance.run_id AS '
                                        'task_instance_run_id, '
                                        'task_instance.map_index AS '
                                        'task_instance_map_index, '
                                        'task_instance.start_date AS '
                                        'task_instance_start_date, '
                                        'task_instance.end_date AS '
                                        'task_instance_end_date, '
                                        'task_instance.duration AS '
                                        'task_instance_duration, '
                                        'task_instance.state AS '
                                        'task_instance_state, '
                                        'task_instance.try_number AS '
                                        'task_instance_try_number, '
                                        'task_instance.max_tries AS '
                                        'task_instance_max_tries, '
                                        'task_instance.hostname AS '
                                        'task_instance_hostname, '
                                        'task_instance.unixname AS '
                                        'task_instance_unixname, '
                                        'task_instance.job_id AS '
                                        'task_instance_job_id, '
                                        'task_instance.pool AS '
                                        'task_instance_pool, '
                                        'task_instance.pool_slots AS '
                                        'task_instance_pool_slots, '
                                        'task_instance.queue AS '
                                        'task_instance_queue, '
                                        'task_instance.priority_weight AS '
                                        'task_instance_priority_weight, '
                                        'task_instance.operator AS '
                                        'task_instance_operator, '
                                        'task_instance.custom_operator_name AS '
                                        'task_instanc...',
                             'timestamp': '2025-05-07T14:49:00.326784Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'UPDATE task_instance SET '
                                        'hostname=%(hostname)s, pid=%(pid)s, '
                                        'updated_at=%(updated_at)s WHERE '
                                        'task_instance.dag_id = '
                                        '%(task_instance_dag_id)s AND '
                                        'task_instance.task_id = '
                                        '%(task_instance_task_id)s AND '
                                        'task_instance.run_id = '
                                        '%(task_instance_run_id)s AND '
                                        'task_instance.map_index = '
                                        '%(task_instance_map_index)s',
                             'timestamp': '2025-05-07T14:49:00.327899Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT dag_run.state, dag_run.id, '
                                        'dag_run.dag_id, dag_run.queued_at, '
                                        'dag_run.execution_date, '
                                        'dag_run.start_date, dag_run.end_date, '
                                        'dag_run.run_id, '
                                        'dag_run.creating_job_id, '
                                        'dag_run.external_trigger, '
                                        'dag_run.run_type, dag_run.conf, '
                                        'dag_run.data_interval_start, '
                                        'dag_run.data_interval_end, '
                                        'dag_run.last_scheduling_decision, '
                                        'dag_run.dag_hash, '
                                        'dag_run.log_template_id, '
                                        'dag_run.updated_at, '
                                        'dag_run.clear_number \n'
                                        'FROM dag_run \n'
                                        'WHERE dag_run.dag_id = %(dag_id_1)s '
                                        'AND dag_run.execution_date < '
                                        '%(execution_date_1)s AND '
                                        'dag_run.state = %(state_1)s ORDER BY '
                                        'dag_run.execution_date DESC \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:49:00.330161Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT dag_run.state, dag_run.id, '
                                        'dag_run.dag_id, dag_run.queued_at, '
                                        'dag_run.execution_date, '
                                        'dag_run.start_date, dag_run.end_date, '
                                        'dag_run.run_id, '
                                        'dag_run.creating_job_id, '
                                        'dag_run.external_trigger, '
                                        'dag_run.run_type, dag_run.conf, '
                                        'dag_run.data_interval_start, '
                                        'dag_run.data_interval_end, '
                                        'dag_run.last_scheduling_decision, '
                                        'dag_run.dag_hash, '
                                        'dag_run.log_template_id, '
                                        'dag_run.updated_at, '
                                        'dag_run.clear_number \n'
                                        'FROM dag_run \n'
                                        'WHERE dag_run.dag_id = %(dag_id_1)s '
                                        'AND dag_run.execution_date < '
                                        '%(execution_date_1)s AND '
                                        'dag_run.state = %(state_1)s ORDER BY '
                                        'dag_run.execution_date DESC \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:49:00.330825Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT xcom.dag_run_id AS '
                                        'xcom_dag_run_id, xcom.task_id AS '
                                        'xcom_task_id, xcom.map_index AS '
                                        'xcom_map_index, xcom.key AS xcom_key, '
                                        'xcom.dag_id AS xcom_dag_id, '
                                        'xcom.run_id AS xcom_run_id, '
                                        'xcom.value AS xcom_value, '
                                        'xcom.timestamp AS xcom_timestamp, '
                                        'dag_run_1.state AS dag_run_1_state, '
                                        'dag_run_1.id AS dag_run_1_id, '
                                        'dag_run_1.dag_id AS dag_run_1_dag_id, '
                                        'dag_run_1.queued_at AS '
                                        'dag_run_1_queued_at, '
                                        'dag_run_1.execution_date AS '
                                        'dag_run_1_execution_date, '
                                        'dag_run_1.start_date AS '
                                        'dag_run_1_start_date, '
                                        'dag_run_1.end_date AS '
                                        'dag_run_1_end_date, dag_run_1.run_id '
                                        'AS dag_run_1_run_id, '
                                        'dag_run_1.creating_job_id AS '
                                        'dag_run_1_creating_job_id, '
                                        'dag_run_1.external_trigger AS '
                                        'dag_run_1_external_trigger, '
                                        'dag_run_1.run_type AS '
                                        'dag_run_1_run_type, dag_run_1.conf AS '
                                        'dag_run_1_conf, '
                                        'dag_run_1.data_interval_start AS '
                                        'dag_run_1_data_interval_start, '
                                        'dag_run_1.data_interval_end AS '
                                        'dag_run_1_data_interval_end, '
                                        'dag_run_1.last_scheduling_decision AS '
                                        'dag_run_1_last_scheduling_decision, '
                                        'dag_run_1.dag_hash AS '
                                        'dag_run_1_dag_hash, '
                                        'dag_run_1.log_temp...',
                             'timestamp': '2025-05-07T14:49:00.331501Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'rendered_task_instance_fields.dag_id '
                                        'AS '
                                        'rendered_task_instance_fields_dag_id, '
                                        'rendered_task_instance_fields.task_id '
                                        'AS '
                                        'rendered_task_instance_fields_task_id, '
                                        'rendered_task_instance_fields.run_id '
                                        'AS '
                                        'rendered_task_instance_fields_run_id, '
                                        'rendered_task_instance_fields.map_index '
                                        'AS '
                                        'rendered_task_instance_fields_map_index, '
                                        'rendered_task_instance_fields.rendered_fields '
                                        'AS '
                                        'rendered_task_instance_fields_rendered_fields, '
                                        'rendered_task_instance_fields.k8s_pod_yaml '
                                        'AS '
                                        'rendered_task_instance_fields_k8s_pod_yaml, '
                                        'task_instance_1.task_display_name AS '
                                        'task_instance_1_task_display_name, '
                                        'dag_run_1.state AS dag_run_1_state, '
                                        'dag_run_1.id AS dag_run_1_id, '
                                        'dag_run_1.dag_id AS dag_run_1_dag_id, '
                                        'dag_run_1.queued_at AS '
                                        'dag_run_1_queued_at, '
                                        'dag_run_1.execution_date AS '
                                        'dag_run_1_execution_date, '
                                        'dag_run_1.start_date AS '
                                        'dag_run_1_start_date, '
                                        'dag_run_1.end_date AS '
                                        'dag_run_1_end_date, dag_run_1.run_id '
                                        'AS dag_run_1_run_id, '
                                        'dag_run_1.creating_job_id AS '
                                        'dag_run_1_creating_job_id, '
                                        'dag_run_1.external_trigger AS '
                                        'dag_run_1_external_tri...',
                             'timestamp': '2025-05-07T14:49:00.333633Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'INSERT INTO '
                                        'rendered_task_instance_fields '
                                        '(dag_id, task_id, run_id, map_index, '
                                        'rendered_fields, k8s_pod_yaml) VALUES '
                                        '(%(dag_id)s, %(task_id)s, %(run_id)s, '
                                        '%(map_index)s, %(rendered_fields)s, '
                                        '%(k8s_pod_yaml)s)',
                             'timestamp': '2025-05-07T14:49:00.334522Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'DELETE FROM '
                                        'rendered_task_instance_fields WHERE '
                                        'rendered_task_instance_fields.dag_id '
                                        '= %(dag_id_1)s AND '
                                        'rendered_task_instance_fields.task_id '
                                        '= %(task_id_1)s AND NOT (EXISTS '
                                        '(SELECT 1 \n'
                                        'FROM (SELECT DISTINCT '
                                        'rendered_task_instance_fields.dag_id '
                                        'AS dag_id, '
                                        'rendered_task_instance_fields.task_id '
                                        'AS task_id, '
                                        'rendered_task_instance_fields.run_id '
                                        'AS run_id, dag_run.execution_date AS '
                                        'execution_date \n'
                                        'FROM rendered_task_instance_fields '
                                        'JOIN dag_run ON '
                                        'rendered_task_instance_fields.dag_id '
                                        '= dag_run.dag_id AND '
                                        'rendered_task_instance_fields.run_id '
                                        '= dag_run.run_id \n'
                                        'WHERE '
                                        'rendered_task_instance_fields.dag_id '
                                        '= %(dag_id_2)s AND '
                                        'rendered_task_instance_fields.task_id '
                                        '= %(task_id_2)s ORDER BY '
                                        'dag_run.execution_date DESC \n'
                                        ' LIMIT %(param_1)s) AS anon_1 \n'
                                        'WHERE anon_1.dag_id = '
                                        'rendered_task_instance_fields.dag_id '
                                        'AND anon_1.task_id = '
                                        'rendered_task_instance_fields.task_id '
                                        'AND anon_1.run_id = '
                                        'rendered_task_instance_fields.run_id))',
                             'timestamp': '2025-05-07T14:49:00.335628Z',
                             'type': 'default'},
                            {'category': 'airflow.models.taskinstance',
                             'data': {'asctime': '2025-05-07T14:49:00.337+0000'},
                             'level': 'info',
                             'message': '::endgroup::',
                             'timestamp': '2025-05-07T14:49:00.337305Z',
                             'type': 'log'},
                            {'category': 'subprocess',
                             'data': {'thread.id': '127776040237952',
                                      'thread.name': 'MainThread'},
                             'message': '/opt/airflow/venvs/python/venv/bin/python '
                                        '-c \n'
                                        'try:\n'
                                        '    from importlib.metadata import '
                                        'version\n'
                                        'except ImportError:\n'
                                        '    from importlib_metadata import '
                                        'version\n'
                                        'print(version("apache-airflow"))\n',
                             'timestamp': '2025-05-07T14:49:00.338014Z',
                             'type': 'subprocess'},
                            {'category': 'airflow.task.operators.airflow.operators.python.ExternalPythonOperator',
                             'data': {'asctime': '2025-05-07T14:49:00.543+0000'},
                             'level': 'warning',
                             'message': 'ExternalPythonOperator.execute cannot '
                                        'be called outside TaskInstance!',
                             'timestamp': '2025-05-07T14:49:00.543092Z',
                             'type': 'log'},
                            {'category': 'subprocess',
                             'data': {'thread.id': '127776040237952',
                                      'thread.name': 'MainThread'},
                             'message': '/opt/airflow/venvs/python/venv/bin/python '
                                        '-c import sys; '
                                        'print(".".join(map(str, '
                                        'sys.version_info)))',
                             'timestamp': '2025-05-07T14:49:00.543707Z',
                             'type': 'subprocess'},
                            {'category': 'airflow.utils.process_utils',
                             'data': {'asctime': '2025-05-07T14:49:00.557+0000'},
                             'level': 'info',
                             'message': 'Executing cmd: '
                                        '/opt/airflow/venvs/python/venv/bin/python '
                                        '/tmp/venv-callnafp1l13/script.py '
                                        '/tmp/venv-callnafp1l13/script.in '
                                        '/tmp/venv-callnafp1l13/script.out '
                                        '/tmp/venv-callnafp1l13/string_args.txt '
                                        '/tmp/venv-callnafp1l13/termination.log',
                             'timestamp': '2025-05-07T14:49:00.557939Z',
                             'type': 'log'},
                            {'category': 'subprocess',
                             'data': {'thread.id': '127776040237952',
                                      'thread.name': 'MainThread'},
                             'message': '/opt/airflow/venvs/python/venv/bin/python '
                                        '/tmp/venv-callnafp1l13/script.py '
                                        '/tmp/venv-callnafp1l13/script.in '
                                        '/tmp/venv-callnafp1l13/script.out '
                                        '/tmp/venv-callnafp1l13/string_args.txt '
                                        '/tmp/venv-callnafp1l13/termination.log',
                             'timestamp': '2025-05-07T14:49:00.558467Z',
                             'type': 'subprocess'},
                            {'category': 'airflow.utils.process_utils',
                             'data': {'asctime': '2025-05-07T14:49:00.558+0000'},
                             'level': 'info',
                             'message': 'Output:',
                             'timestamp': '2025-05-07T14:49:00.558478Z',
                             'type': 'log'},
                            {'category': 'airflow.utils.process_utils',
                             'data': {'asctime': '2025-05-07T14:49:01.539+0000'},
                             'level': 'info',
                             'message': 'Traceback (most recent call last):',
                             'timestamp': '2025-05-07T14:49:01.539339Z',
                             'type': 'log'},
                            {'category': 'airflow.utils.process_utils',
                             'data': {'asctime': '2025-05-07T14:49:01.539+0000'},
                             'level': 'info',
                             'message': '  File '
                                        '"/tmp/venv-callnafp1l13/script.py", '
                                        'line 84, in <module>',
                             'timestamp': '2025-05-07T14:49:01.539753Z',
                             'type': 'log'},
                            {'category': 'airflow.utils.process_utils',
                             'data': {'asctime': '2025-05-07T14:49:01.540+0000'},
                             'level': 'info',
                             'message': '    res = '
                                        '_import_stock_etablissement_historique(*arg_dict["args"], '
                                        '**arg_dict["kwargs"])',
                             'timestamp': '2025-05-07T14:49:01.540107Z',
                             'type': 'log'},
                            {'category': 'airflow.utils.process_utils',
                             'data': {'asctime': '2025-05-07T14:49:01.540+0000'},
                             'level': 'info',
                             'message': '          '
                                        '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^',
                             'timestamp': '2025-05-07T14:49:01.540381Z',
                             'type': 'log'},
                            {'category': 'airflow.utils.process_utils',
                             'data': {'asctime': '2025-05-07T14:49:01.540+0000'},
                             'level': 'info',
                             'message': '  File '
                                        '"/tmp/venv-callnafp1l13/script.py", '
                                        'line 26, in '
                                        '_import_stock_etablissement_historique',
                             'timestamp': '2025-05-07T14:49:01.540645Z',
                             'type': 'log'},
                            {'category': 'airflow.utils.process_utils',
                             'data': {'asctime': '2025-05-07T14:49:01.540+0000'},
                             'level': 'info',
                             'message': '    raise KeyError("forced error")',
                             'timestamp': '2025-05-07T14:49:01.540861Z',
                             'type': 'log'},
                            {'category': 'airflow.utils.process_utils',
                             'data': {'asctime': '2025-05-07T14:49:01.540+0000'},
                             'level': 'info',
                             'message': "KeyError: 'forced error'",
                             'timestamp': '2025-05-07T14:49:01.540992Z',
                             'type': 'log'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name AS '
                                        'task_instance_task_display_name, '
                                        'task_instance.task_id AS '
                                        'task_instance_task_id, '
                                        'task_instance.dag_id AS '
                                        'task_instance_dag_id, '
                                        'task_instance.run_id AS '
                                        'task_instance_run_id, '
                                        'task_instance.map_index AS '
                                        'task_instance_map_index, '
                                        'task_instance.start_date AS '
                                        'task_instance_start_date, '
                                        'task_instance.end_date AS '
                                        'task_instance_end_date, '
                                        'task_instance.duration AS '
                                        'task_instance_duration, '
                                        'task_instance.state AS '
                                        'task_instance_state, '
                                        'task_instance.try_number AS '
                                        'task_instance_try_number, '
                                        'task_instance.max_tries AS '
                                        'task_instance_max_tries, '
                                        'task_instance.hostname AS '
                                        'task_instance_hostname, '
                                        'task_instance.unixname AS '
                                        'task_instance_unixname, '
                                        'task_instance.job_id AS '
                                        'task_instance_job_id, '
                                        'task_instance.pool AS '
                                        'task_instance_pool, '
                                        'task_instance.pool_slots AS '
                                        'task_instance_pool_slots, '
                                        'task_instance.queue AS '
                                        'task_instance_queue, '
                                        'task_instance.priority_weight AS '
                                        'task_instance_priority_weight, '
                                        'task_instance.operator AS '
                                        'task_instance_operator, '
                                        'task_instance.custom_operator_name AS '
                                        'task_instanc...',
                             'timestamp': '2025-05-07T14:49:01.649281Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name AS '
                                        'task_instance_task_display_name, '
                                        'task_instance.task_id AS '
                                        'task_instance_task_id, '
                                        'task_instance.dag_id AS '
                                        'task_instance_dag_id, '
                                        'task_instance.run_id AS '
                                        'task_instance_run_id, '
                                        'task_instance.map_index AS '
                                        'task_instance_map_index, '
                                        'task_instance.start_date AS '
                                        'task_instance_start_date, '
                                        'task_instance.end_date AS '
                                        'task_instance_end_date, '
                                        'task_instance.duration AS '
                                        'task_instance_duration, '
                                        'task_instance.state AS '
                                        'task_instance_state, '
                                        'task_instance.try_number AS '
                                        'task_instance_try_number, '
                                        'task_instance.max_tries AS '
                                        'task_instance_max_tries, '
                                        'task_instance.hostname AS '
                                        'task_instance_hostname, '
                                        'task_instance.unixname AS '
                                        'task_instance_unixname, '
                                        'task_instance.job_id AS '
                                        'task_instance_job_id, '
                                        'task_instance.pool AS '
                                        'task_instance_pool, '
                                        'task_instance.pool_slots AS '
                                        'task_instance_pool_slots, '
                                        'task_instance.queue AS '
                                        'task_instance_queue, '
                                        'task_instance.priority_weight AS '
                                        'task_instance_priority_weight, '
                                        'task_instance.operator AS '
                                        'task_instance_operator, '
                                        'task_instance.custom_operator_name AS '
                                        'task_instanc...',
                             'timestamp': '2025-05-07T14:49:01.651426Z',
                             'type': 'default'},
                            {'category': 'airflow.models.taskinstance',
                             'data': {'asctime': '2025-05-07T14:49:01.652+0000'},
                             'level': 'info',
                             'message': 'Marking task as FAILED. '
                                        'dag_id=import_sirene, '
                                        'task_id=import_stock_etablissement_historique, '
                                        'run_id=manual__2025-05-07T14:48:59.689915+00:00, '
                                        'execution_date=20250507T144859, '
                                        'start_date=20250507T144900, '
                                        'end_date=20250507T144901',
                             'timestamp': '2025-05-07T14:49:01.652090Z',
                             'type': 'log'},
                            {'category': 'airflow.models.taskinstance',
                             'data': {'asctime': '2025-05-07T14:49:01.652+0000'},
                             'level': 'info',
                             'message': 'Executing callback at index 0: '
                                        'fill_sentry_scope',
                             'timestamp': '2025-05-07T14:49:01.652281Z',
                             'type': 'log'},
                            {'category': 'query',
                             'data': {},
                             'message': 'INSERT INTO log (dttm, dag_id, '
                                        'task_id, map_index, event, '
                                        'execution_date, run_id, owner, '
                                        'owner_display_name, extra, '
                                        'try_number) VALUES (%(dttm)s, '
                                        '%(dag_id)s, %(task_id)s, '
                                        '%(map_index)s, %(event)s, '
                                        '%(execution_date)s, %(run_id)s, '
                                        '%(owner)s, %(owner_display_name)s, '
                                        '%(extra)s, %(try_number)s) RETURNING '
                                        'log.id',
                             'timestamp': '2025-05-07T14:49:01.652710Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'INSERT INTO task_fail (task_id, '
                                        'dag_id, run_id, map_index, '
                                        'start_date, end_date, duration) '
                                        'VALUES (%(task_id)s, %(dag_id)s, '
                                        '%(run_id)s, %(map_index)s, '
                                        '%(start_date)s, %(end_date)s, '
                                        '%(duration)s) RETURNING task_fail.id',
                             'timestamp': '2025-05-07T14:49:01.653497Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT dag_run.state, dag_run.id, '
                                        'dag_run.dag_id, dag_run.queued_at, '
                                        'dag_run.execution_date, '
                                        'dag_run.start_date, dag_run.end_date, '
                                        'dag_run.run_id, '
                                        'dag_run.creating_job_id, '
                                        'dag_run.external_trigger, '
                                        'dag_run.run_type, dag_run.conf, '
                                        'dag_run.data_interval_start, '
                                        'dag_run.data_interval_end, '
                                        'dag_run.last_scheduling_decision, '
                                        'dag_run.dag_hash, '
                                        'dag_run.log_template_id, '
                                        'dag_run.updated_at, '
                                        'dag_run.clear_number \n'
                                        'FROM dag_run \n'
                                        'WHERE dag_run.dag_id = %(dag_id_1)s '
                                        'AND dag_run.run_id = %(run_id_1)s',
                             'timestamp': '2025-05-07T14:49:01.656296Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name AS '
                                        'task_instance_task_display_name, '
                                        'task_instance.task_id AS '
                                        'task_instance_task_id, '
                                        'task_instance.dag_id AS '
                                        'task_instance_dag_id, '
                                        'task_instance.run_id AS '
                                        'task_instance_run_id, '
                                        'task_instance.map_index AS '
                                        'task_instance_map_index, '
                                        'task_instance.start_date AS '
                                        'task_instance_start_date, '
                                        'task_instance.end_date AS '
                                        'task_instance_end_date, '
                                        'task_instance.duration AS '
                                        'task_instance_duration, '
                                        'task_instance.state AS '
                                        'task_instance_state, '
                                        'task_instance.try_number AS '
                                        'task_instance_try_number, '
                                        'task_instance.max_tries AS '
                                        'task_instance_max_tries, '
                                        'task_instance.hostname AS '
                                        'task_instance_hostname, '
                                        'task_instance.unixname AS '
                                        'task_instance_unixname, '
                                        'task_instance.job_id AS '
                                        'task_instance_job_id, '
                                        'task_instance.pool AS '
                                        'task_instance_pool, '
                                        'task_instance.pool_slots AS '
                                        'task_instance_pool_slots, '
                                        'task_instance.queue AS '
                                        'task_instance_queue, '
                                        'task_instance.priority_weight AS '
                                        'task_instance_priority_weight, '
                                        'task_instance.operator AS '
                                        'task_instance_operator, '
                                        'task_instance.custom_operator_name AS '
                                        'task_instanc...',
                             'timestamp': '2025-05-07T14:49:01.657928Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'UPDATE dag_run SET '
                                        'last_scheduling_decision=%(last_scheduling_decision)s, '
                                        'dag_hash=%(dag_hash)s, '
                                        'updated_at=%(updated_at)s WHERE '
                                        'dag_run.id = %(dag_run_id)s',
                             'timestamp': '2025-05-07T14:49:01.659462Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'UPDATE task_instance SET '
                                        'end_date=%(end_date)s, '
                                        'duration=%(duration)s, '
                                        'state=%(state)s, '
                                        'updated_at=%(updated_at)s WHERE '
                                        'task_instance.dag_id = '
                                        '%(task_instance_dag_id)s AND '
                                        'task_instance.task_id = '
                                        '%(task_instance_task_id)s AND '
                                        'task_instance.run_id = '
                                        '%(task_instance_run_id)s AND '
                                        'task_instance.map_index = '
                                        '%(task_instance_map_index)s',
                             'timestamp': '2025-05-07T14:49:01.660106Z',
                             'type': 'default'},
                            {'category': 'airflow.models.taskinstance',
                             'data': {'asctime': '2025-05-07T14:49:01.661+0000'},
                             'level': 'info',
                             'message': '::group::Post task execution logs',
                             'timestamp': '2025-05-07T14:49:01.661977Z',
                             'type': 'log'}]},
 'contexts': {'custom': {'airflow_logs_url': 'http://localhost:8080/dags/import_sirene/grid?dag_run_id=manual__2025-05-07T14%3A48%3A59.689915%2B00%3A00&task_id=import_stock_etablissement_historique&base_date=2025-05-07T14%3A48%3A59%2B0000&tab=logs',
                         'github_commit_url': 'https://github.com/gip-inclusion/data-inclusion/commit/'},
              'runtime': {'build': '3.12.9 (main, Feb  6 2025, 22:37:05) [GCC '
                                   '12.2.0]',
                          'name': 'CPython',
                          'version': '3.12.9'},
              'trace': {'dynamic_sampling_context': {'environment': 'production',
                                                     'public_key': 'cd84156bd026269b4f25fccaa3fac8d5',
                                                     'sample_rate': '1',
                                                     'trace_id': '95c78c83d2674d559a8b33df4d8cf4c6'},
                        'parent_span_id': None,
                        'span_id': 'b1af39e4ce52a55f',
                        'trace_id': '95c78c83d2674d559a8b33df4d8cf4c6'}},
 'environment': 'production',
 'event_id': 'c481201204cb48d0a2dd8da6653ad5e2',
 'exception': {'values': [{'mechanism': {'handled': True, 'type': 'generic'},
                           'module': 'airflow.exceptions',
                           'stacktrace': {'frames': [{'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/sentry.py',
                                                      'context_line': '                        '
                                                                      'return '
                                                                      'func(_self, '
                                                                      '*args, '
                                                                      '**kwargs)',
                                                      'filename': 'airflow/sentry.py',
                                                      'function': 'wrapper',
                                                      'in_app': False,
                                                      'lineno': 186,
                                                      'module': 'airflow.sentry',
                                                      'post_context': ['                    '
                                                                       'except '
                                                                       'Exception '
                                                                       'as e:',
                                                                       '                        '
                                                                       'sentry_sdk.capture_exception(e)',
                                                                       '                        '
                                                                       'raise',
                                                                       '',
                                                                       '            '
                                                                       'return '
                                                                       'wrapper'],
                                                      'pre_context': ['                        '
                                                                      'else:',
                                                                      '                            '
                                                                      'task_instance '
                                                                      '= _self',
                                                                      '',
                                                                      '                        '
                                                                      'self.add_tagging(task_instance)',
                                                                      '                        '
                                                                      'self.add_breadcrumbs(task_instance, '
                                                                      'session=session)'],
                                                      'vars': {'_self': '<TaskInstance: '
                                                                        'import_sirene.import_stock_etablissement_historique '
                                                                        'manual__2025-05-07T14:48:59.689915+00:00 '
                                                                        '[failed]>',
                                                               'args': [],
                                                               'e': 'AirflowException("Process '
                                                                    'returned '
                                                                    'non-zero '
                                                                    'exit '
                                                                    'status '
                                                                    "1.\\n'forced "
                                                                    'error\'")',
                                                               'func': '<function '
                                                                       'TaskInstance._run_raw_task '
                                                                       'at '
                                                                       '0x743623700540>',
                                                               'kwargs': {'mark_success': 'False',
                                                                          'raise_on_defer': 'True',
                                                                          'session': '<sqlalchemy.orm.session.Session '
                                                                                     'object '
                                                                                     'at '
                                                                                     '0x7436235d1130>'},
                                                               'self': '<airflow.sentry.ConfiguredSentry '
                                                                       'object '
                                                                       'at '
                                                                       '0x74362559af90>',
                                                               'session': '[Filtered]',
                                                               'session_args_idx': '6',
                                                               'task_instance': '<TaskInstance: '
                                                                                'import_sirene.import_stock_etablissement_historique '
                                                                                'manual__2025-05-07T14:48:59.689915+00:00 '
                                                                                '[failed]>'}},
                                                     {'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py',
                                                      'context_line': '        '
                                                                      'return '
                                                                      '_run_raw_task(',
                                                      'filename': 'airflow/models/taskinstance.py',
                                                      'function': '_run_raw_task',
                                                      'in_app': False,
                                                      'lineno': 3006,
                                                      'module': 'airflow.models.taskinstance',
                                                      'post_context': ['            '
                                                                       'ti=self,',
                                                                       '            '
                                                                       'mark_success=mark_success,',
                                                                       '            '
                                                                       'test_mode=test_mode,',
                                                                       '            '
                                                                       'job_id=job_id,',
                                                                       '            '
                                                                       'pool=pool,'],
                                                      'pre_context': ['        '
                                                                      ':param '
                                                                      'session: '
                                                                      'SQLAlchemy '
                                                                      'ORM '
                                                                      'Session',
                                                                      '        '
                                                                      '"""',
                                                                      '        '
                                                                      'if '
                                                                      'TYPE_CHECKING:',
                                                                      '            '
                                                                      'assert '
                                                                      'self.task',
                                                                      ''],
                                                      'vars': {'job_id': 'None',
                                                               'mark_success': 'False',
                                                               'pool': 'None',
                                                               'raise_on_defer': 'True',
                                                               'self': '<TaskInstance: '
                                                                       'import_sirene.import_stock_etablissement_historique '
                                                                       'manual__2025-05-07T14:48:59.689915+00:00 '
                                                                       '[failed]>',
                                                               'session': '[Filtered]',
                                                               'test_mode': 'False'}},
                                                     {'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py',
                                                      'context_line': '                '
                                                                      'TaskInstance._execute_task_with_callbacks(',
                                                      'filename': 'airflow/models/taskinstance.py',
                                                      'function': '_run_raw_task',
                                                      'in_app': False,
                                                      'lineno': 274,
                                                      'module': 'airflow.models.taskinstance',
                                                      'post_context': ['                    '
                                                                       'self=ti,  '
                                                                       '# '
                                                                       'type: '
                                                                       'ignore[arg-type]',
                                                                       '                    '
                                                                       'context=context,',
                                                                       '                    '
                                                                       'test_mode=test_mode,',
                                                                       '                    '
                                                                       'session=session,',
                                                                       '                '
                                                                       ')'],
                                                      'pre_context': ['        '
                                                                      'ti.task '
                                                                      '= '
                                                                      'ti.task.prepare_for_execution()',
                                                                      '        '
                                                                      'context '
                                                                      '= '
                                                                      'ti.get_template_context(ignore_param_exceptions=False, '
                                                                      'session=session)',
                                                                      '',
                                                                      '        '
                                                                      'try:',
                                                                      '            '
                                                                      'if not '
                                                                      'mark_success:'],
                                                      'vars': {'actual_start_date': 'datetime.datetime(2025, '
                                                                                    '5, '
                                                                                    '7, '
                                                                                    '14, '
                                                                                    '49, '
                                                                                    '0, '
                                                                                    '329394, '
                                                                                    "tzinfo=Timezone('UTC'))",
                                                               'context': {'conf': {'DEFAULT': {},
                                                                                    'api': {'access_control_allow_headers': "''",
                                                                                            'access_control_allow_methods': "''",
                                                                                            'access_control_allow_origins': "''",
                                                                                            'auth_backends': "'airflow.api.auth.backend.session'",
                                                                                            'enable_experimental_api': "'False'",
                                                                                            'enable_xcom_deserialize_support': "'False'",
                                                                                            'fallback_page_limit': "'100'",
                                                                                            'google_key_path': "''",
                                                                                            'google_oauth2_audience': "''",
                                                                                            'maximum_page_limit': "'100'"},
                                                                                    'cli': {'api_client': "'airflow.api.client.local_client'",
                                                                                            'endpoint_url': "'http://localhost:8080'"},
                                                                                    'core': {'auth_manager': "'airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager'",
                                                                                             'dags_are_paused_at_creation': "'True'",
                                                                                             'dags_folder': "'/opt/airflow/dags'",
                                                                                             'default_timezone': "'Europe/Paris'",
                                                                                             'executor': "'LocalExecutor'",
                                                                                             'hostname_callable': "'airflow.utils.net.getfqdn'",
                                                                                             'max_active_runs_per_dag': "'16'",
                                                                                             'max_active_tasks_per_dag': "'16'",
                                                                                             'might_contain_dag_callable': "'airflow.utils.file.might_contain_dag_via_default_heuristic'",
                                                                                             'parallelism': "'4'"},
                                                                                    'database': {'alembic_ini_file_path': "'alembic.ini'",
                                                                                                 'load_default_connections': "'false'",
                                                                                                 'sql_alchemy_conn': "'postgresql://airflow:airflow@airflow-db:5432/airflow'",
                                                                                                 'sql_alchemy_max_overflow': "'10'",
                                                                                                 'sql_alchemy_pool_enabled': "'True'",
                                                                                                 'sql_alchemy_pool_pre_ping': "'True'",
                                                                                                 'sql_alchemy_pool_recycle': "'1800'",
                                                                                                 'sql_alchemy_pool_size': "'5'",
                                                                                                 'sql_alchemy_schema': "''",
                                                                                                 'sql_engine_encoding': "'utf-8'"},
                                                                                    'debug': {'fail_fast': "'False'"},
                                                                                    'logging': {'base_log_folder': "'/opt/airflow/logs'",
                                                                                                'celery_logging_level': "''",
                                                                                                'delete_local_logs': "'False'",
                                                                                                'encrypt_s3_logs': "'False'",
                                                                                                'google_key_path': "''",
                                                                                                'logging_level': "'INFO'",
                                                                                                'remote_base_log_folder': "''",
                                                                                                'remote_log_conn_id': "''",
                                                                                                'remote_logging': "'False'",
                                                                                                'remote_task_handler_kwargs': "''"},
                                                                                    'metrics': {'metrics_allow_list': "''",
                                                                                                'metrics_block_list': "''",
                                                                                                'metrics_use_pattern_match': "'False'",
                                                                                                'stat_name_handler': "''",
                                                                                                'statsd_datadog_enabled': "'False'",
                                                                                                'statsd_datadog_tags': "''",
                                                                                                'statsd_host': "'localhost'",
                                                                                                'statsd_on': "'False'",
                                                                                                'statsd_port': "'8125'",
                                                                                                'statsd_prefix': "'airflow'"},
                                                                                    'secrets': {'backend': "''",
                                                                                                'backend_kwargs': "''",
                                                                                                'cache_ttl_seconds': "'900'",
                                                                                                'use_cache': "'False'"},
                                                                                    'traces': {'otel_debugging_on': "'False'",
                                                                                               'otel_host': "'localhost'",
                                                                                               'otel_on': "'False'",
                                                                                               'otel_port': "'8889'",
                                                                                               'otel_service': "'Airflow'",
                                                                                               'otel_ssl_active': "'False'",
                                                                                               'otel_task_log_event': "'False'"}},
                                                                           'dag': '<DAG: '
                                                                                  'import_sirene>',
                                                                           'dag_run': '<DagRun '
                                                                                      'import_sirene '
                                                                                      '@ '
                                                                                      '2025-05-07 '
                                                                                      '14:48:59.689915+00:00: '
                                                                                      'manual__2025-05-07T14:48:59.689915+00:00, '
                                                                                      'state:running, '
                                                                                      'queued_at: '
                                                                                      'None. '
                                                                                      'externally '
                                                                                      'triggered: '
                                                                                      'False>',
                                                                           'data_interval_end': 'DateTime(2025, '
                                                                                                '5, '
                                                                                                '7, '
                                                                                                '14, '
                                                                                                '48, '
                                                                                                '59, '
                                                                                                '689915, '
                                                                                                "tzinfo=Timezone('UTC'))",
                                                                           'data_interval_start': 'DateTime(2025, '
                                                                                                  '5, '
                                                                                                  '7, '
                                                                                                  '14, '
                                                                                                  '48, '
                                                                                                  '59, '
                                                                                                  '689915, '
                                                                                                  "tzinfo=Timezone('UTC'))",
                                                                           'ds': "'2025-05-07'",
                                                                           'ds_nodash': "'20250507'",
                                                                           'execution_date': 'DateTime(2025, '
                                                                                             '5, '
                                                                                             '7, '
                                                                                             '14, '
                                                                                             '48, '
                                                                                             '59, '
                                                                                             '689915, '
                                                                                             "tzinfo=Timezone('UTC'))",
                                                                           'expanded_ti_count': 'None',
                                                                           'outlet_events': {}},
                                                               'job_id': 'None',
                                                               'mark_success': 'False',
                                                               'pool': 'None',
                                                               'raise_on_defer': 'True',
                                                               'session': '[Filtered]',
                                                               'state': '<TaskInstanceState.SHUTDOWN: '
                                                                        "'shutdown'>",
                                                               'test_mode': 'False',
                                                               'ti': '<TaskInstance: '
                                                                     'import_sirene.import_stock_etablissement_historique '
                                                                     'manual__2025-05-07T14:48:59.689915+00:00 '
                                                                     '[failed]>'}},
                                                     {'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py',
                                                      'context_line': '                    '
                                                                      'result '
                                                                      '= '
                                                                      'self._execute_task(context, '
                                                                      'task_orig)',
                                                      'filename': 'airflow/models/taskinstance.py',
                                                      'function': '_execute_task_with_callbacks',
                                                      'in_app': False,
                                                      'lineno': 3161,
                                                      'module': 'airflow.models.taskinstance',
                                                      'post_context': ['                '
                                                                       'except '
                                                                       'Exception:',
                                                                       '                    '
                                                                       '# If '
                                                                       'the '
                                                                       'task '
                                                                       'failed, '
                                                                       'swallow '
                                                                       'rendering '
                                                                       'error '
                                                                       'so it '
                                                                       "doesn't "
                                                                       'mask '
                                                                       'the '
                                                                       'main '
                                                                       'error.',
                                                                       '                    '
                                                                       'with '
                                                                       'contextlib.suppress(jinja2.TemplateSyntaxError, '
                                                                       'jinja2.UndefinedError):',
                                                                       '                        '
                                                                       'self.rendered_map_index '
                                                                       '= '
                                                                       '_render_map_index(context, '
                                                                       'jinja_env=jinja_env)',
                                                                       '                    '
                                                                       'raise'],
                                                      'pre_context': ['                '
                                                                      'return '
                                                                      'rendered_map_index',
                                                                      '',
                                                                      '            '
                                                                      '# '
                                                                      'Execute '
                                                                      'the '
                                                                      'task.',
                                                                      '            '
                                                                      'with '
                                                                      'set_current_context(context):',
                                                                      '                '
                                                                      'try:'],
                                                      'vars': {'airflow_context_vars': {'AIRFLOW_CTX_DAG_ID': "'import_sirene'",
                                                                                        'AIRFLOW_CTX_DAG_OWNER': "'airflow'",
                                                                                        'AIRFLOW_CTX_DAG_RUN_ID': "'manual__2025-05-07T14:48:59.689915+00:00'",
                                                                                        'AIRFLOW_CTX_EXECUTION_DATE': "'2025-05-07T14:48:59.689915+00:00'",
                                                                                        'AIRFLOW_CTX_TASK_ID': "'import_stock_etablissement_historique'",
                                                                                        'AIRFLOW_CTX_TRY_NUMBER': "'1'"},
                                                               'context': {'conf': {'DEFAULT': {},
                                                                                    'api': {'access_control_allow_headers': "''",
                                                                                            'access_control_allow_methods': "''",
                                                                                            'access_control_allow_origins': "''",
                                                                                            'auth_backends': "'airflow.api.auth.backend.session'",
                                                                                            'enable_experimental_api': "'False'",
                                                                                            'enable_xcom_deserialize_support': "'False'",
                                                                                            'fallback_page_limit': "'100'",
                                                                                            'google_key_path': "''",
                                                                                            'google_oauth2_audience': "''",
                                                                                            'maximum_page_limit': "'100'"},
                                                                                    'cli': {'api_client': "'airflow.api.client.local_client'",
                                                                                            'endpoint_url': "'http://localhost:8080'"},
                                                                                    'core': {'auth_manager': "'airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager'",
                                                                                             'dags_are_paused_at_creation': "'True'",
                                                                                             'dags_folder': "'/opt/airflow/dags'",
                                                                                             'default_timezone': "'Europe/Paris'",
                                                                                             'executor': "'LocalExecutor'",
                                                                                             'hostname_callable': "'airflow.utils.net.getfqdn'",
                                                                                             'max_active_runs_per_dag': "'16'",
                                                                                             'max_active_tasks_per_dag': "'16'",
                                                                                             'might_contain_dag_callable': "'airflow.utils.file.might_contain_dag_via_default_heuristic'",
                                                                                             'parallelism': "'4'"},
                                                                                    'database': {'alembic_ini_file_path': "'alembic.ini'",
                                                                                                 'load_default_connections': "'false'",
                                                                                                 'sql_alchemy_conn': "'postgresql://airflow:airflow@airflow-db:5432/airflow'",
                                                                                                 'sql_alchemy_max_overflow': "'10'",
                                                                                                 'sql_alchemy_pool_enabled': "'True'",
                                                                                                 'sql_alchemy_pool_pre_ping': "'True'",
                                                                                                 'sql_alchemy_pool_recycle': "'1800'",
                                                                                                 'sql_alchemy_pool_size': "'5'",
                                                                                                 'sql_alchemy_schema': "''",
                                                                                                 'sql_engine_encoding': "'utf-8'"},
                                                                                    'debug': {'fail_fast': "'False'"},
                                                                                    'logging': {'base_log_folder': "'/opt/airflow/logs'",
                                                                                                'celery_logging_level': "''",
                                                                                                'delete_local_logs': "'False'",
                                                                                                'encrypt_s3_logs': "'False'",
                                                                                                'google_key_path': "''",
                                                                                                'logging_level': "'INFO'",
                                                                                                'remote_base_log_folder': "''",
                                                                                                'remote_log_conn_id': "''",
                                                                                                'remote_logging': "'False'",
                                                                                                'remote_task_handler_kwargs': "''"},
                                                                                    'metrics': {'metrics_allow_list': "''",
                                                                                                'metrics_block_list': "''",
                                                                                                'metrics_use_pattern_match': "'False'",
                                                                                                'stat_name_handler': "''",
                                                                                                'statsd_datadog_enabled': "'False'",
                                                                                                'statsd_datadog_tags': "''",
                                                                                                'statsd_host': "'localhost'",
                                                                                                'statsd_on': "'False'",
                                                                                                'statsd_port': "'8125'",
                                                                                                'statsd_prefix': "'airflow'"},
                                                                                    'secrets': {'backend': "''",
                                                                                                'backend_kwargs': "''",
                                                                                                'cache_ttl_seconds': "'900'",
                                                                                                'use_cache': "'False'"},
                                                                                    'traces': {'otel_debugging_on': "'False'",
                                                                                               'otel_host': "'localhost'",
                                                                                               'otel_on': "'False'",
                                                                                               'otel_port': "'8889'",
                                                                                               'otel_service': "'Airflow'",
                                                                                               'otel_ssl_active': "'False'",
                                                                                               'otel_task_log_event': "'False'"}},
                                                                           'dag': '<DAG: '
                                                                                  'import_sirene>',
                                                                           'dag_run': '<DagRun '
                                                                                      'import_sirene '
                                                                                      '@ '
                                                                                      '2025-05-07 '
                                                                                      '14:48:59.689915+00:00: '
                                                                                      'manual__2025-05-07T14:48:59.689915+00:00, '
                                                                                      'state:running, '
                                                                                      'queued_at: '
                                                                                      'None. '
                                                                                      'externally '
                                                                                      'triggered: '
                                                                                      'False>',
                                                                           'data_interval_end': 'DateTime(2025, '
                                                                                                '5, '
                                                                                                '7, '
                                                                                                '14, '
                                                                                                '48, '
                                                                                                '59, '
                                                                                                '689915, '
                                                                                                "tzinfo=Timezone('UTC'))",
                                                                           'data_interval_start': 'DateTime(2025, '
                                                                                                  '5, '
                                                                                                  '7, '
                                                                                                  '14, '
                                                                                                  '48, '
                                                                                                  '59, '
                                                                                                  '689915, '
                                                                                                  "tzinfo=Timezone('UTC'))",
                                                                           'ds': "'2025-05-07'",
                                                                           'ds_nodash': "'20250507'",
                                                                           'execution_date': 'DateTime(2025, '
                                                                                             '5, '
                                                                                             '7, '
                                                                                             '14, '
                                                                                             '48, '
                                                                                             '59, '
                                                                                             '689915, '
                                                                                             "tzinfo=Timezone('UTC'))",
                                                                           'expanded_ti_count': 'None',
                                                                           'outlet_events': {}},
                                                               'dag': '<DAG: '
                                                                      'import_sirene>',
                                                               'jinja_env': '<airflow.templates.SandboxedEnvironment '
                                                                            'object '
                                                                            'at '
                                                                            '0x743623093200>',
                                                               'rendered_fields': {'op_args': [],
                                                                                   'op_kwargs': {},
                                                                                   'python': "'/opt/***/venvs/python/venv/bin/python'",
                                                                                   'templates_dict': 'None'},
                                                               'self': '<TaskInstance: '
                                                                       'import_sirene.import_stock_etablissement_historique '
                                                                       'manual__2025-05-07T14:48:59.689915+00:00 '
                                                                       '[failed]>',
                                                               'session': '[Filtered]',
                                                               'signal_handler': '<function '
                                                                                 'TaskInstance._execute_task_with_callbacks.<locals>.signal_handler '
                                                                                 'at '
                                                                                 '0x743622980fe0>',
                                                               'task_orig': '<Task(ExternalPythonOperator): '
                                                                            'import_stock_etablissement_historique>',
                                                               'test_mode': 'False'}},
                                                     {'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py',
                                                      'context_line': '        '
                                                                      'return '
                                                                      '_execute_task(self, '
                                                                      'context, '
                                                                      'task_orig)',
                                                      'filename': 'airflow/models/taskinstance.py',
                                                      'function': '_execute_task',
                                                      'in_app': False,
                                                      'lineno': 3185,
                                                      'module': 'airflow.models.taskinstance',
                                                      'post_context': ['',
                                                                       '    '
                                                                       '@provide_session',
                                                                       '    '
                                                                       'def '
                                                                       'defer_task(self, '
                                                                       'exception: '
                                                                       'TaskDeferred '
                                                                       '| '
                                                                       'None, '
                                                                       'session: '
                                                                       'Session '
                                                                       '= '
                                                                       'NEW_SESSION) '
                                                                       '-> '
                                                                       'None:',
                                                                       '        '
                                                                       '"""',
                                                                       '        '
                                                                       'Mark '
                                                                       'the '
                                                                       'task '
                                                                       'as '
                                                                       'deferred '
                                                                       'and '
                                                                       'sets '
                                                                       'up the '
                                                                       'trigger '
                                                                       'that '
                                                                       'is '
                                                                       'needed '
                                                                       'to '
                                                                       'resume '
                                                                       'it '
                                                                       'when '
                                                                       'TaskDeferred '
                                                                       'is '
                                                                       'raised.'],
                                                      'pre_context': ['        '
                                                                      'Execute '
                                                                      'Task '
                                                                      '(optionally '
                                                                      'with a '
                                                                      'Timeout) '
                                                                      'and '
                                                                      'push '
                                                                      'Xcom '
                                                                      'results.',
                                                                      '',
                                                                      '        '
                                                                      ':param '
                                                                      'context: '
                                                                      'Jinja2 '
                                                                      'context',
                                                                      '        '
                                                                      ':param '
                                                                      'task_orig: '
                                                                      'origin '
                                                                      'task',
                                                                      '        '
                                                                      '"""'],
                                                      'vars': {'context': {'conf': {'DEFAULT': {},
                                                                                    'api': {'access_control_allow_headers': "''",
                                                                                            'access_control_allow_methods': "''",
                                                                                            'access_control_allow_origins': "''",
                                                                                            'auth_backends': "'airflow.api.auth.backend.session'",
                                                                                            'enable_experimental_api': "'False'",
                                                                                            'enable_xcom_deserialize_support': "'False'",
                                                                                            'fallback_page_limit': "'100'",
                                                                                            'google_key_path': "''",
                                                                                            'google_oauth2_audience': "''",
                                                                                            'maximum_page_limit': "'100'"},
                                                                                    'cli': {'api_client': "'airflow.api.client.local_client'",
                                                                                            'endpoint_url': "'http://localhost:8080'"},
                                                                                    'core': {'auth_manager': "'airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager'",
                                                                                             'dags_are_paused_at_creation': "'True'",
                                                                                             'dags_folder': "'/opt/airflow/dags'",
                                                                                             'default_timezone': "'Europe/Paris'",
                                                                                             'executor': "'LocalExecutor'",
                                                                                             'hostname_callable': "'airflow.utils.net.getfqdn'",
                                                                                             'max_active_runs_per_dag': "'16'",
                                                                                             'max_active_tasks_per_dag': "'16'",
                                                                                             'might_contain_dag_callable': "'airflow.utils.file.might_contain_dag_via_default_heuristic'",
                                                                                             'parallelism': "'4'"},
                                                                                    'database': {'alembic_ini_file_path': "'alembic.ini'",
                                                                                                 'load_default_connections': "'false'",
                                                                                                 'sql_alchemy_conn': "'postgresql://airflow:airflow@airflow-db:5432/airflow'",
                                                                                                 'sql_alchemy_max_overflow': "'10'",
                                                                                                 'sql_alchemy_pool_enabled': "'True'",
                                                                                                 'sql_alchemy_pool_pre_ping': "'True'",
                                                                                                 'sql_alchemy_pool_recycle': "'1800'",
                                                                                                 'sql_alchemy_pool_size': "'5'",
                                                                                                 'sql_alchemy_schema': "''",
                                                                                                 'sql_engine_encoding': "'utf-8'"},
                                                                                    'debug': {'fail_fast': "'False'"},
                                                                                    'logging': {'base_log_folder': "'/opt/airflow/logs'",
                                                                                                'celery_logging_level': "''",
                                                                                                'delete_local_logs': "'False'",
                                                                                                'encrypt_s3_logs': "'False'",
                                                                                                'google_key_path': "''",
                                                                                                'logging_level': "'INFO'",
                                                                                                'remote_base_log_folder': "''",
                                                                                                'remote_log_conn_id': "''",
                                                                                                'remote_logging': "'False'",
                                                                                                'remote_task_handler_kwargs': "''"},
                                                                                    'metrics': {'metrics_allow_list': "''",
                                                                                                'metrics_block_list': "''",
                                                                                                'metrics_use_pattern_match': "'False'",
                                                                                                'stat_name_handler': "''",
                                                                                                'statsd_datadog_enabled': "'False'",
                                                                                                'statsd_datadog_tags': "''",
                                                                                                'statsd_host': "'localhost'",
                                                                                                'statsd_on': "'False'",
                                                                                                'statsd_port': "'8125'",
                                                                                                'statsd_prefix': "'airflow'"},
                                                                                    'secrets': {'backend': "''",
                                                                                                'backend_kwargs': "''",
                                                                                                'cache_ttl_seconds': "'900'",
                                                                                                'use_cache': "'False'"},
                                                                                    'traces': {'otel_debugging_on': "'False'",
                                                                                               'otel_host': "'localhost'",
                                                                                               'otel_on': "'False'",
                                                                                               'otel_port': "'8889'",
                                                                                               'otel_service': "'Airflow'",
                                                                                               'otel_ssl_active': "'False'",
                                                                                               'otel_task_log_event': "'False'"}},
                                                                           'dag': '<DAG: '
                                                                                  'import_sirene>',
                                                                           'dag_run': '<DagRun '
                                                                                      'import_sirene '
                                                                                      '@ '
                                                                                      '2025-05-07 '
                                                                                      '14:48:59.689915+00:00: '
                                                                                      'manual__2025-05-07T14:48:59.689915+00:00, '
                                                                                      'state:running, '
                                                                                      'queued_at: '
                                                                                      'None. '
                                                                                      'externally '
                                                                                      'triggered: '
                                                                                      'False>',
                                                                           'data_interval_end': 'DateTime(2025, '
                                                                                                '5, '
                                                                                                '7, '
                                                                                                '14, '
                                                                                                '48, '
                                                                                                '59, '
                                                                                                '689915, '
                                                                                                "tzinfo=Timezone('UTC'))",
                                                                           'data_interval_start': 'DateTime(2025, '
                                                                                                  '5, '
                                                                                                  '7, '
                                                                                                  '14, '
                                                                                                  '48, '
                                                                                                  '59, '
                                                                                                  '689915, '
                                                                                                  "tzinfo=Timezone('UTC'))",
                                                                           'ds': "'2025-05-07'",
                                                                           'ds_nodash': "'20250507'",
                                                                           'execution_date': 'DateTime(2025, '
                                                                                             '5, '
                                                                                             '7, '
                                                                                             '14, '
                                                                                             '48, '
                                                                                             '59, '
                                                                                             '689915, '
                                                                                             "tzinfo=Timezone('UTC'))",
                                                                           'expanded_ti_count': 'None',
                                                                           'outlet_events': {}},
                                                               'self': '<TaskInstance: '
                                                                       'import_sirene.import_stock_etablissement_historique '
                                                                       'manual__2025-05-07T14:48:59.689915+00:00 '
                                                                       '[failed]>',
                                                               'task_orig': '<Task(ExternalPythonOperator): '
                                                                            'import_stock_etablissement_historique>'}},
                                                     {'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py',
                                                      'context_line': '        '
                                                                      'result '
                                                                      '= '
                                                                      '_execute_callable(context=context, '
                                                                      '**execute_callable_kwargs)',
                                                      'filename': 'airflow/models/taskinstance.py',
                                                      'function': '_execute_task',
                                                      'in_app': False,
                                                      'lineno': 768,
                                                      'module': 'airflow.models.taskinstance',
                                                      'post_context': ['    cm '
                                                                       '= '
                                                                       'nullcontext() '
                                                                       'if '
                                                                       'InternalApiConfig.get_use_internal_api() '
                                                                       'else '
                                                                       'create_session()',
                                                                       '    '
                                                                       'with '
                                                                       'cm as '
                                                                       'session_or_null:',
                                                                       '        '
                                                                       'if '
                                                                       'task_to_execute.do_xcom_push:',
                                                                       '            '
                                                                       'xcom_value '
                                                                       '= '
                                                                       'result',
                                                                       '        '
                                                                       'else:'],
                                                      'pre_context': ['                '
                                                                      'result '
                                                                      '= '
                                                                      '_execute_callable(context=context, '
                                                                      '**execute_callable_kwargs)',
                                                                      '        '
                                                                      'except '
                                                                      'AirflowTaskTimeout:',
                                                                      '            '
                                                                      'task_to_execute.on_kill()',
                                                                      '            '
                                                                      'raise',
                                                                      '    '
                                                                      'else:'],
                                                      'vars': {'MappedOperator': '<class '
                                                                                 "'airflow.models.mappedoperator.MappedOperator'>",
                                                               '_execute_callable': '<function '
                                                                                    '_execute_task.<locals>._execute_callable '
                                                                                    'at '
                                                                                    '0x743622a52660>',
                                                               'context': {'conf': {'DEFAULT': {},
                                                                                    'api': {'access_control_allow_headers': "''",
                                                                                            'access_control_allow_methods': "''",
                                                                                            'access_control_allow_origins': "''",
                                                                                            'auth_backends': "'airflow.api.auth.backend.session'",
                                                                                            'enable_experimental_api': "'False'",
                                                                                            'enable_xcom_deserialize_support': "'False'",
                                                                                            'fallback_page_limit': "'100'",
                                                                                            'google_key_path': "''",
                                                                                            'google_oauth2_audience': "''",
                                                                                            'maximum_page_limit': "'100'"},
                                                                                    'cli': {'api_client': "'airflow.api.client.local_client'",
                                                                                            'endpoint_url': "'http://localhost:8080'"},
                                                                                    'core': {'auth_manager': "'airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager'",
                                                                                             'dags_are_paused_at_creation': "'True'",
                                                                                             'dags_folder': "'/opt/airflow/dags'",
                                                                                             'default_timezone': "'Europe/Paris'",
                                                                                             'executor': "'LocalExecutor'",
                                                                                             'hostname_callable': "'airflow.utils.net.getfqdn'",
                                                                                             'max_active_runs_per_dag': "'16'",
                                                                                             'max_active_tasks_per_dag': "'16'",
                                                                                             'might_contain_dag_callable': "'airflow.utils.file.might_contain_dag_via_default_heuristic'",
                                                                                             'parallelism': "'4'"},
                                                                                    'database': {'alembic_ini_file_path': "'alembic.ini'",
                                                                                                 'load_default_connections': "'false'",
                                                                                                 'sql_alchemy_conn': "'postgresql://airflow:airflow@airflow-db:5432/airflow'",
                                                                                                 'sql_alchemy_max_overflow': "'10'",
                                                                                                 'sql_alchemy_pool_enabled': "'True'",
                                                                                                 'sql_alchemy_pool_pre_ping': "'True'",
                                                                                                 'sql_alchemy_pool_recycle': "'1800'",
                                                                                                 'sql_alchemy_pool_size': "'5'",
                                                                                                 'sql_alchemy_schema': "''",
                                                                                                 'sql_engine_encoding': "'utf-8'"},
                                                                                    'debug': {'fail_fast': "'False'"},
                                                                                    'logging': {'base_log_folder': "'/opt/airflow/logs'",
                                                                                                'celery_logging_level': "''",
                                                                                                'delete_local_logs': "'False'",
                                                                                                'encrypt_s3_logs': "'False'",
                                                                                                'google_key_path': "''",
                                                                                                'logging_level': "'INFO'",
                                                                                                'remote_base_log_folder': "''",
                                                                                                'remote_log_conn_id': "''",
                                                                                                'remote_logging': "'False'",
                                                                                                'remote_task_handler_kwargs': "''"},
                                                                                    'metrics': {'metrics_allow_list': "''",
                                                                                                'metrics_block_list': "''",
                                                                                                'metrics_use_pattern_match': "'False'",
                                                                                                'stat_name_handler': "''",
                                                                                                'statsd_datadog_enabled': "'False'",
                                                                                                'statsd_datadog_tags': "''",
                                                                                                'statsd_host': "'localhost'",
                                                                                                'statsd_on': "'False'",
                                                                                                'statsd_port': "'8125'",
                                                                                                'statsd_prefix': "'airflow'"},
                                                                                    'secrets': {'backend': "''",
                                                                                                'backend_kwargs': "''",
                                                                                                'cache_ttl_seconds': "'900'",
                                                                                                'use_cache': "'False'"},
                                                                                    'traces': {'otel_debugging_on': "'False'",
                                                                                               'otel_host': "'localhost'",
                                                                                               'otel_on': "'False'",
                                                                                               'otel_port': "'8889'",
                                                                                               'otel_service': "'Airflow'",
                                                                                               'otel_ssl_active': "'False'",
                                                                                               'otel_task_log_event': "'False'"}},
                                                                           'dag': '<DAG: '
                                                                                  'import_sirene>',
                                                                           'dag_run': '<DagRun '
                                                                                      'import_sirene '
                                                                                      '@ '
                                                                                      '2025-05-07 '
                                                                                      '14:48:59.689915+00:00: '
                                                                                      'manual__2025-05-07T14:48:59.689915+00:00, '
                                                                                      'state:running, '
                                                                                      'queued_at: '
                                                                                      'None. '
                                                                                      'externally '
                                                                                      'triggered: '
                                                                                      'False>',
                                                                           'data_interval_end': 'DateTime(2025, '
                                                                                                '5, '
                                                                                                '7, '
                                                                                                '14, '
                                                                                                '48, '
                                                                                                '59, '
                                                                                                '689915, '
                                                                                                "tzinfo=Timezone('UTC'))",
                                                                           'data_interval_start': 'DateTime(2025, '
                                                                                                  '5, '
                                                                                                  '7, '
                                                                                                  '14, '
                                                                                                  '48, '
                                                                                                  '59, '
                                                                                                  '689915, '
                                                                                                  "tzinfo=Timezone('UTC'))",
                                                                           'ds': "'2025-05-07'",
                                                                           'ds_nodash': "'20250507'",
                                                                           'execution_date': 'DateTime(2025, '
                                                                                             '5, '
                                                                                             '7, '
                                                                                             '14, '
                                                                                             '48, '
                                                                                             '59, '
                                                                                             '689915, '
                                                                                             "tzinfo=Timezone('UTC'))",
                                                                           'expanded_ti_count': 'None',
                                                                           'outlet_events': {}},
                                                               'execute_callable': '<bound '
                                                                                   'method '
                                                                                   '_BasePythonVirtualenvOperator.execute '
                                                                                   'of '
                                                                                   '<Task(ExternalPythonOperator): '
                                                                                   'import_stock_etablissement_historique>>',
                                                               'execute_callable_kwargs': {'ExternalPythonOperator__sentinel': '<object '
                                                                                                                               'object '
                                                                                                                               'at '
                                                                                                                               '0x74362d6f2b40>'},
                                                               'task_instance': '<TaskInstance: '
                                                                                'import_sirene.import_stock_etablissement_historique '
                                                                                'manual__2025-05-07T14:48:59.689915+00:00 '
                                                                                '[failed]>',
                                                               'task_orig': '<Task(ExternalPythonOperator): '
                                                                            'import_stock_etablissement_historique>',
                                                               'task_to_execute': '<Task(ExternalPythonOperator): '
                                                                                  'import_stock_etablissement_historique>'}},
                                                     {'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py',
                                                      'context_line': '            '
                                                                      'return '
                                                                      'ExecutionCallableRunner(',
                                                      'filename': 'airflow/models/taskinstance.py',
                                                      'function': '_execute_callable',
                                                      'in_app': False,
                                                      'lineno': 734,
                                                      'module': 'airflow.models.taskinstance',
                                                      'post_context': ['                '
                                                                       'execute_callable,',
                                                                       '                '
                                                                       'context_get_outlet_events(context),',
                                                                       '                '
                                                                       'logger=log,',
                                                                       '            '
                                                                       ').run(context=context, '
                                                                       '**execute_callable_kwargs)',
                                                                       '        '
                                                                       'except '
                                                                       'SystemExit '
                                                                       'as e:'],
                                                      'pre_context': ['    def '
                                                                      '_execute_callable(context: '
                                                                      'Context, '
                                                                      '**execute_callable_kwargs):',
                                                                      '        '
                                                                      'try:',
                                                                      '            '
                                                                      '# Print '
                                                                      'a '
                                                                      'marker '
                                                                      'for log '
                                                                      'grouping '
                                                                      'of '
                                                                      'details '
                                                                      'before '
                                                                      'task '
                                                                      'execution',
                                                                      '            '
                                                                      'log.info("::endgroup::")',
                                                                      ''],
                                                      'vars': {'context': {'conf': {'DEFAULT': {},
                                                                                    'api': {'access_control_allow_headers': "''",
                                                                                            'access_control_allow_methods': "''",
                                                                                            'access_control_allow_origins': "''",
                                                                                            'auth_backends': "'airflow.api.auth.backend.session'",
                                                                                            'enable_experimental_api': "'False'",
                                                                                            'enable_xcom_deserialize_support': "'False'",
                                                                                            'fallback_page_limit': "'100'",
                                                                                            'google_key_path': "''",
                                                                                            'google_oauth2_audience': "''",
                                                                                            'maximum_page_limit': "'100'"},
                                                                                    'cli': {'api_client': "'airflow.api.client.local_client'",
                                                                                            'endpoint_url': "'http://localhost:8080'"},
                                                                                    'core': {'auth_manager': "'airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager'",
                                                                                             'dags_are_paused_at_creation': "'True'",
                                                                                             'dags_folder': "'/opt/airflow/dags'",
                                                                                             'default_timezone': "'Europe/Paris'",
                                                                                             'executor': "'LocalExecutor'",
                                                                                             'hostname_callable': "'airflow.utils.net.getfqdn'",
                                                                                             'max_active_runs_per_dag': "'16'",
                                                                                             'max_active_tasks_per_dag': "'16'",
                                                                                             'might_contain_dag_callable': "'airflow.utils.file.might_contain_dag_via_default_heuristic'",
                                                                                             'parallelism': "'4'"},
                                                                                    'database': {'alembic_ini_file_path': "'alembic.ini'",
                                                                                                 'load_default_connections': "'false'",
                                                                                                 'sql_alchemy_conn': "'postgresql://airflow:airflow@airflow-db:5432/airflow'",
                                                                                                 'sql_alchemy_max_overflow': "'10'",
                                                                                                 'sql_alchemy_pool_enabled': "'True'",
                                                                                                 'sql_alchemy_pool_pre_ping': "'True'",
                                                                                                 'sql_alchemy_pool_recycle': "'1800'",
                                                                                                 'sql_alchemy_pool_size': "'5'",
                                                                                                 'sql_alchemy_schema': "''",
                                                                                                 'sql_engine_encoding': "'utf-8'"},
                                                                                    'debug': {'fail_fast': "'False'"},
                                                                                    'logging': {'base_log_folder': "'/opt/airflow/logs'",
                                                                                                'celery_logging_level': "''",
                                                                                                'delete_local_logs': "'False'",
                                                                                                'encrypt_s3_logs': "'False'",
                                                                                                'google_key_path': "''",
                                                                                                'logging_level': "'INFO'",
                                                                                                'remote_base_log_folder': "''",
                                                                                                'remote_log_conn_id': "''",
                                                                                                'remote_logging': "'False'",
                                                                                                'remote_task_handler_kwargs': "''"},
                                                                                    'metrics': {'metrics_allow_list': "''",
                                                                                                'metrics_block_list': "''",
                                                                                                'metrics_use_pattern_match': "'False'",
                                                                                                'stat_name_handler': "''",
                                                                                                'statsd_datadog_enabled': "'False'",
                                                                                                'statsd_datadog_tags': "''",
                                                                                                'statsd_host': "'localhost'",
                                                                                                'statsd_on': "'False'",
                                                                                                'statsd_port': "'8125'",
                                                                                                'statsd_prefix': "'airflow'"},
                                                                                    'secrets': {'backend': "''",
                                                                                                'backend_kwargs': "''",
                                                                                                'cache_ttl_seconds': "'900'",
                                                                                                'use_cache': "'False'"},
                                                                                    'traces': {'otel_debugging_on': "'False'",
                                                                                               'otel_host': "'localhost'",
                                                                                               'otel_on': "'False'",
                                                                                               'otel_port': "'8889'",
                                                                                               'otel_service': "'Airflow'",
                                                                                               'otel_ssl_active': "'False'",
                                                                                               'otel_task_log_event': "'False'"}},
                                                                           'dag': '<DAG: '
                                                                                  'import_sirene>',
                                                                           'dag_run': '<DagRun '
                                                                                      'import_sirene '
                                                                                      '@ '
                                                                                      '2025-05-07 '
                                                                                      '14:48:59.689915+00:00: '
                                                                                      'manual__2025-05-07T14:48:59.689915+00:00, '
                                                                                      'state:running, '
                                                                                      'queued_at: '
                                                                                      'None. '
                                                                                      'externally '
                                                                                      'triggered: '
                                                                                      'False>',
                                                                           'data_interval_end': 'DateTime(2025, '
                                                                                                '5, '
                                                                                                '7, '
                                                                                                '14, '
                                                                                                '48, '
                                                                                                '59, '
                                                                                                '689915, '
                                                                                                "tzinfo=Timezone('UTC'))",
                                                                           'data_interval_start': 'DateTime(2025, '
                                                                                                  '5, '
                                                                                                  '7, '
                                                                                                  '14, '
                                                                                                  '48, '
                                                                                                  '59, '
                                                                                                  '689915, '
                                                                                                  "tzinfo=Timezone('UTC'))",
                                                                           'ds': "'2025-05-07'",
                                                                           'ds_nodash': "'20250507'",
                                                                           'execution_date': 'DateTime(2025, '
                                                                                             '5, '
                                                                                             '7, '
                                                                                             '14, '
                                                                                             '48, '
                                                                                             '59, '
                                                                                             '689915, '
                                                                                             "tzinfo=Timezone('UTC'))",
                                                                           'expanded_ti_count': 'None',
                                                                           'outlet_events': {}},
                                                               'execute_callable': '<bound '
                                                                                   'method '
                                                                                   '_BasePythonVirtualenvOperator.execute '
                                                                                   'of '
                                                                                   '<Task(ExternalPythonOperator): '
                                                                                   'import_stock_etablissement_historique>>',
                                                               'execute_callable_kwargs': {'ExternalPythonOperator__sentinel': '<object '
                                                                                                                               'object '
                                                                                                                               'at '
                                                                                                                               '0x74362d6f2b40>'}}},
                                                     {'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/operator_helpers.py',
                                                      'context_line': '            '
                                                                      'return '
                                                                      'self.func(*args, '
                                                                      '**kwargs)',
                                                      'filename': 'airflow/utils/operator_helpers.py',
                                                      'function': 'run',
                                                      'in_app': False,
                                                      'lineno': 252,
                                                      'module': 'airflow.utils.operator_helpers',
                                                      'post_context': ['',
                                                                       '        '
                                                                       'result: '
                                                                       'Any = '
                                                                       'NOTSET',
                                                                       '',
                                                                       '        '
                                                                       'def '
                                                                       '_run():',
                                                                       '            '
                                                                       'nonlocal '
                                                                       'result'],
                                                      'pre_context': ['',
                                                                      '        '
                                                                      'from '
                                                                      'airflow.datasets.metadata '
                                                                      'import '
                                                                      'Metadata',
                                                                      '        '
                                                                      'from '
                                                                      'airflow.utils.types '
                                                                      'import '
                                                                      'NOTSET',
                                                                      '',
                                                                      '        '
                                                                      'if not '
                                                                      'inspect.isgeneratorfunction(self.func):'],
                                                      'vars': {'Metadata': '<class '
                                                                           "'airflow.datasets.metadata.Metadata'>",
                                                               'NOTSET': '<airflow.utils.types.ArgNotSet '
                                                                         'object '
                                                                         'at '
                                                                         '0x743628ffee40>',
                                                               'args': [],
                                                               'inspect': '<module '
                                                                          "'inspect' "
                                                                          'from '
                                                                          "'/usr/local/lib/python3.12/inspect.py'>",
                                                               'kwargs': {'ExternalPythonOperator__sentinel': '<object '
                                                                                                              'object '
                                                                                                              'at '
                                                                                                              '0x74362d6f2b40>',
                                                                          'context': {'conf': {'DEFAULT': {},
                                                                                               'api': {'access_control_allow_headers': "''",
                                                                                                       'access_control_allow_methods': "''",
                                                                                                       'access_control_allow_origins': "''",
                                                                                                       'auth_backends': "'airflow.api.auth.backend.session'",
                                                                                                       'enable_experimental_api': "'False'",
                                                                                                       'enable_xcom_deserialize_support': "'False'",
                                                                                                       'fallback_page_limit': "'100'",
                                                                                                       'google_key_path': "''",
                                                                                                       'google_oauth2_audience': "''",
                                                                                                       'maximum_page_limit': "'100'"},
                                                                                               'cli': {'api_client': "'airflow.api.client.local_client'",
                                                                                                       'endpoint_url': "'http://localhost:8080'"},
                                                                                               'core': {'auth_manager': "'airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager'",
                                                                                                        'dags_are_paused_at_creation': "'True'",
                                                                                                        'dags_folder': "'/opt/airflow/dags'",
                                                                                                        'default_timezone': "'Europe/Paris'",
                                                                                                        'executor': "'LocalExecutor'",
                                                                                                        'hostname_callable': "'airflow.utils.net.getfqdn'",
                                                                                                        'max_active_runs_per_dag': "'16'",
                                                                                                        'max_active_tasks_per_dag': "'16'",
                                                                                                        'might_contain_dag_callable': "'airflow.utils.file.might_contain_dag_via_default_heuristic'",
                                                                                                        'parallelism': "'4'"},
                                                                                               'database': {'alembic_ini_file_path': "'alembic.ini'",
                                                                                                            'load_default_connections': "'false'",
                                                                                                            'sql_alchemy_conn': "'postgresql://airflow:airflow@airflow-db:5432/airflow'",
                                                                                                            'sql_alchemy_max_overflow': "'10'",
                                                                                                            'sql_alchemy_pool_enabled': "'True'",
                                                                                                            'sql_alchemy_pool_pre_ping': "'True'",
                                                                                                            'sql_alchemy_pool_recycle': "'1800'",
                                                                                                            'sql_alchemy_pool_size': "'5'",
                                                                                                            'sql_alchemy_schema': "''",
                                                                                                            'sql_engine_encoding': "'utf-8'"},
                                                                                               'debug': {'fail_fast': "'False'"},
                                                                                               'logging': {'base_log_folder': "'/opt/airflow/logs'",
                                                                                                           'celery_logging_level': "''",
                                                                                                           'delete_local_logs': "'False'",
                                                                                                           'encrypt_s3_logs': "'False'",
                                                                                                           'google_key_path': "''",
                                                                                                           'logging_level': "'INFO'",
                                                                                                           'remote_base_log_folder': "''",
                                                                                                           'remote_log_conn_id': "''",
                                                                                                           'remote_logging': "'False'",
                                                                                                           'remote_task_handler_kwargs': "''"},
                                                                                               'metrics': {'metrics_allow_list': "''",
                                                                                                           'metrics_block_list': "''",
                                                                                                           'metrics_use_pattern_match': "'False'",
                                                                                                           'stat_name_handler': "''",
                                                                                                           'statsd_datadog_enabled': "'False'",
                                                                                                           'statsd_datadog_tags': "''",
                                                                                                           'statsd_host': "'localhost'",
                                                                                                           'statsd_on': "'False'",
                                                                                                           'statsd_port': "'8125'",
                                                                                                           'statsd_prefix': "'airflow'"},
                                                                                               'secrets': {'backend': "''",
                                                                                                           'backend_kwargs': "''",
                                                                                                           'cache_ttl_seconds': "'900'",
                                                                                                           'use_cache': "'False'"},
                                                                                               'traces': {'otel_debugging_on': "'False'",
                                                                                                          'otel_host': "'localhost'",
                                                                                                          'otel_on': "'False'",
                                                                                                          'otel_port': "'8889'",
                                                                                                          'otel_service': "'Airflow'",
                                                                                                          'otel_ssl_active': "'False'",
                                                                                                          'otel_task_log_event': "'False'"}},
                                                                                      'dag': '<DAG: '
                                                                                             'import_sirene>',
                                                                                      'dag_run': '<DagRun '
                                                                                                 'import_sirene '
                                                                                                 '@ '
                                                                                                 '2025-05-07 '
                                                                                                 '14:48:59.689915+00:00: '
                                                                                                 'manual__2025-05-07T14:48:59.689915+00:00, '
                                                                                                 'state:running, '
                                                                                                 'queued_at: '
                                                                                                 'None. '
                                                                                                 'externally '
                                                                                                 'triggered: '
                                                                                                 'False>',
                                                                                      'data_interval_end': 'DateTime(2025, '
                                                                                                           '5, '
                                                                                                           '7, '
                                                                                                           '14, '
                                                                                                           '48, '
                                                                                                           '59, '
                                                                                                           '689915, '
                                                                                                           "tzinfo=Timezone('UTC'))",
                                                                                      'data_interval_start': 'DateTime(2025, '
                                                                                                             '5, '
                                                                                                             '7, '
                                                                                                             '14, '
                                                                                                             '48, '
                                                                                                             '59, '
                                                                                                             '689915, '
                                                                                                             "tzinfo=Timezone('UTC'))",
                                                                                      'ds': "'2025-05-07'",
                                                                                      'ds_nodash': "'20250507'",
                                                                                      'execution_date': 'DateTime(2025, '
                                                                                                        '5, '
                                                                                                        '7, '
                                                                                                        '14, '
                                                                                                        '48, '
                                                                                                        '59, '
                                                                                                        '689915, '
                                                                                                        "tzinfo=Timezone('UTC'))",
                                                                                      'expanded_ti_count': 'None',
                                                                                      'outlet_events': {}}},
                                                               'self': '<airflow.utils.operator_helpers.ExecutionCallableRunner '
                                                                       'object '
                                                                       'at '
                                                                       '0x743618381040>'}},
                                                     {'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py',
                                                      'context_line': '            '
                                                                      'return '
                                                                      'func(self, '
                                                                      '*args, '
                                                                      '**kwargs)',
                                                      'filename': 'airflow/models/baseoperator.py',
                                                      'function': 'wrapper',
                                                      'in_app': False,
                                                      'lineno': 424,
                                                      'module': 'airflow.models.baseoperator',
                                                      'post_context': ['',
                                                                       '        '
                                                                       'return '
                                                                       'wrapper',
                                                                       '',
                                                                       '',
                                                                       'class '
                                                                       'BaseOperatorMeta(abc.ABCMeta):'],
                                                      'pre_context': ['            '
                                                                      'if not '
                                                                      'cls.test_mode '
                                                                      'and not '
                                                                      'sentinel '
                                                                      '== '
                                                                      '_sentinel '
                                                                      'and not '
                                                                      'isinstance(self, '
                                                                      'DecoratedOperator):',
                                                                      '                '
                                                                      'message '
                                                                      '= '
                                                                      'f"{self.__class__.__name__}.{func.__name__} '
                                                                      'cannot '
                                                                      'be '
                                                                      'called '
                                                                      'outside '
                                                                      'TaskInstance!"',
                                                                      '                '
                                                                      'if not '
                                                                      'self.allow_nested_operators:',
                                                                      '                    '
                                                                      'raise '
                                                                      'AirflowException(message)',
                                                                      '                '
                                                                      'self.log.warning(message)'],
                                                      'vars': {'DecoratedOperator': '<class '
                                                                                    "'airflow.decorators.base.DecoratedOperator'>",
                                                               'args': [],
                                                               'cls': '<class '
                                                                      "'airflow.models.baseoperator.ExecutorSafeguard'>",
                                                               'func': '<function '
                                                                       '_BasePythonVirtualenvOperator.execute '
                                                                       'at '
                                                                       '0x743622ce05e0>',
                                                               'kwargs': {'context': {'conf': {'DEFAULT': {},
                                                                                               'api': {'access_control_allow_headers': "''",
                                                                                                       'access_control_allow_methods': "''",
                                                                                                       'access_control_allow_origins': "''",
                                                                                                       'auth_backends': "'airflow.api.auth.backend.session'",
                                                                                                       'enable_experimental_api': "'False'",
                                                                                                       'enable_xcom_deserialize_support': "'False'",
                                                                                                       'fallback_page_limit': "'100'",
                                                                                                       'google_key_path': "''",
                                                                                                       'google_oauth2_audience': "''",
                                                                                                       'maximum_page_limit': "'100'"},
                                                                                               'cli': {'api_client': "'airflow.api.client.local_client'",
                                                                                                       'endpoint_url': "'http://localhost:8080'"},
                                                                                               'core': {'auth_manager': "'airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager'",
                                                                                                        'dags_are_paused_at_creation': "'True'",
                                                                                                        'dags_folder': "'/opt/airflow/dags'",
                                                                                                        'default_timezone': "'Europe/Paris'",
                                                                                                        'executor': "'LocalExecutor'",
                                                                                                        'hostname_callable': "'airflow.utils.net.getfqdn'",
                                                                                                        'max_active_runs_per_dag': "'16'",
                                                                                                        'max_active_tasks_per_dag': "'16'",
                                                                                                        'might_contain_dag_callable': "'airflow.utils.file.might_contain_dag_via_default_heuristic'",
                                                                                                        'parallelism': "'4'"},
                                                                                               'database': {'alembic_ini_file_path': "'alembic.ini'",
                                                                                                            'load_default_connections': "'false'",
                                                                                                            'sql_alchemy_conn': "'postgresql://airflow:airflow@airflow-db:5432/airflow'",
                                                                                                            'sql_alchemy_max_overflow': "'10'",
                                                                                                            'sql_alchemy_pool_enabled': "'True'",
                                                                                                            'sql_alchemy_pool_pre_ping': "'True'",
                                                                                                            'sql_alchemy_pool_recycle': "'1800'",
                                                                                                            'sql_alchemy_pool_size': "'5'",
                                                                                                            'sql_alchemy_schema': "''",
                                                                                                            'sql_engine_encoding': "'utf-8'"},
                                                                                               'debug': {'fail_fast': "'False'"},
                                                                                               'logging': {'base_log_folder': "'/opt/airflow/logs'",
                                                                                                           'celery_logging_level': "''",
                                                                                                           'delete_local_logs': "'False'",
                                                                                                           'encrypt_s3_logs': "'False'",
                                                                                                           'google_key_path': "''",
                                                                                                           'logging_level': "'INFO'",
                                                                                                           'remote_base_log_folder': "''",
                                                                                                           'remote_log_conn_id': "''",
                                                                                                           'remote_logging': "'False'",
                                                                                                           'remote_task_handler_kwargs': "''"},
                                                                                               'metrics': {'metrics_allow_list': "''",
                                                                                                           'metrics_block_list': "''",
                                                                                                           'metrics_use_pattern_match': "'False'",
                                                                                                           'stat_name_handler': "''",
                                                                                                           'statsd_datadog_enabled': "'False'",
                                                                                                           'statsd_datadog_tags': "''",
                                                                                                           'statsd_host': "'localhost'",
                                                                                                           'statsd_on': "'False'",
                                                                                                           'statsd_port': "'8125'",
                                                                                                           'statsd_prefix': "'airflow'"},
                                                                                               'secrets': {'backend': "''",
                                                                                                           'backend_kwargs': "''",
                                                                                                           'cache_ttl_seconds': "'900'",
                                                                                                           'use_cache': "'False'"},
                                                                                               'traces': {'otel_debugging_on': "'False'",
                                                                                                          'otel_host': "'localhost'",
                                                                                                          'otel_on': "'False'",
                                                                                                          'otel_port': "'8889'",
                                                                                                          'otel_service': "'Airflow'",
                                                                                                          'otel_ssl_active': "'False'",
                                                                                                          'otel_task_log_event': "'False'"}},
                                                                                      'dag': '<DAG: '
                                                                                             'import_sirene>',
                                                                                      'dag_run': '<DagRun '
                                                                                                 'import_sirene '
                                                                                                 '@ '
                                                                                                 '2025-05-07 '
                                                                                                 '14:48:59.689915+00:00: '
                                                                                                 'manual__2025-05-07T14:48:59.689915+00:00, '
                                                                                                 'state:running, '
                                                                                                 'queued_at: '
                                                                                                 'None. '
                                                                                                 'externally '
                                                                                                 'triggered: '
                                                                                                 'False>',
                                                                                      'data_interval_end': 'DateTime(2025, '
                                                                                                           '5, '
                                                                                                           '7, '
                                                                                                           '14, '
                                                                                                           '48, '
                                                                                                           '59, '
                                                                                                           '689915, '
                                                                                                           "tzinfo=Timezone('UTC'))",
                                                                                      'data_interval_start': 'DateTime(2025, '
                                                                                                             '5, '
                                                                                                             '7, '
                                                                                                             '14, '
                                                                                                             '48, '
                                                                                                             '59, '
                                                                                                             '689915, '
                                                                                                             "tzinfo=Timezone('UTC'))",
                                                                                      'ds': "'2025-05-07'",
                                                                                      'ds_nodash': "'20250507'",
                                                                                      'execution_date': 'DateTime(2025, '
                                                                                                        '5, '
                                                                                                        '7, '
                                                                                                        '14, '
                                                                                                        '48, '
                                                                                                        '59, '
                                                                                                        '689915, '
                                                                                                        "tzinfo=Timezone('UTC'))",
                                                                                      'expanded_ti_count': 'None',
                                                                                      'outlet_events': {}}},
                                                               'self': '<Task(ExternalPythonOperator): '
                                                                       'import_stock_etablissement_historique>',
                                                               'sentinel': '<object '
                                                                           'object '
                                                                           'at '
                                                                           '0x74362d6f2b40>',
                                                               'sentinel_key': "'ExternalPythonOperator__sentinel'"}},
                                                     {'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py',
                                                      'context_line': '        '
                                                                      'return '
                                                                      'super().execute(context=serializable_context)',
                                                      'filename': 'airflow/operators/python.py',
                                                      'function': 'execute',
                                                      'in_app': False,
                                                      'lineno': 505,
                                                      'module': 'airflow.operators.python',
                                                      'post_context': ['',
                                                                       '    '
                                                                       'def '
                                                                       'get_python_source(self):',
                                                                       '        '
                                                                       '"""Return '
                                                                       'the '
                                                                       'source '
                                                                       'of '
                                                                       'self.python_callable."""',
                                                                       '        '
                                                                       'return '
                                                                       'textwrap.dedent(inspect.getsource(self.python_callable))',
                                                                       ''],
                                                      'pre_context': ['        '
                                                                      'pass',
                                                                      '',
                                                                      '    def '
                                                                      'execute(self, '
                                                                      'context: '
                                                                      'Context) '
                                                                      '-> Any:',
                                                                      '        '
                                                                      'serializable_keys '
                                                                      '= '
                                                                      'set(self._iter_serializable_context_keys())',
                                                                      '        '
                                                                      'serializable_context '
                                                                      '= '
                                                                      'context_copy_partial(context, '
                                                                      'serializable_keys)'],
                                                      'vars': {'__class__': '<class '
                                                                            "'airflow.operators.python._BasePythonVirtualenvOperator'>",
                                                               'context': {'conf': {'DEFAULT': {},
                                                                                    'api': {'access_control_allow_headers': "''",
                                                                                            'access_control_allow_methods': "''",
                                                                                            'access_control_allow_origins': "''",
                                                                                            'auth_backends': "'airflow.api.auth.backend.session'",
                                                                                            'enable_experimental_api': "'False'",
                                                                                            'enable_xcom_deserialize_support': "'False'",
                                                                                            'fallback_page_limit': "'100'",
                                                                                            'google_key_path': "''",
                                                                                            'google_oauth2_audience': "''",
                                                                                            'maximum_page_limit': "'100'"},
                                                                                    'cli': {'api_client': "'airflow.api.client.local_client'",
                                                                                            'endpoint_url': "'http://localhost:8080'"},
                                                                                    'core': {'auth_manager': "'airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager'",
                                                                                             'dags_are_paused_at_creation': "'True'",
                                                                                             'dags_folder': "'/opt/airflow/dags'",
                                                                                             'default_timezone': "'Europe/Paris'",
                                                                                             'executor': "'LocalExecutor'",
                                                                                             'hostname_callable': "'airflow.utils.net.getfqdn'",
                                                                                             'max_active_runs_per_dag': "'16'",
                                                                                             'max_active_tasks_per_dag': "'16'",
                                                                                             'might_contain_dag_callable': "'airflow.utils.file.might_contain_dag_via_default_heuristic'",
                                                                                             'parallelism': "'4'"},
                                                                                    'database': {'alembic_ini_file_path': "'alembic.ini'",
                                                                                                 'load_default_connections': "'false'",
                                                                                                 'sql_alchemy_conn': "'postgresql://airflow:airflow@airflow-db:5432/airflow'",
                                                                                                 'sql_alchemy_max_overflow': "'10'",
                                                                                                 'sql_alchemy_pool_enabled': "'True'",
                                                                                                 'sql_alchemy_pool_pre_ping': "'True'",
                                                                                                 'sql_alchemy_pool_recycle': "'1800'",
                                                                                                 'sql_alchemy_pool_size': "'5'",
                                                                                                 'sql_alchemy_schema': "''",
                                                                                                 'sql_engine_encoding': "'utf-8'"},
                                                                                    'debug': {'fail_fast': "'False'"},
                                                                                    'logging': {'base_log_folder': "'/opt/airflow/logs'",
                                                                                                'celery_logging_level': "''",
                                                                                                'delete_local_logs': "'False'",
                                                                                                'encrypt_s3_logs': "'False'",
                                                                                                'google_key_path': "''",
                                                                                                'logging_level': "'INFO'",
                                                                                                'remote_base_log_folder': "''",
                                                                                                'remote_log_conn_id': "''",
                                                                                                'remote_logging': "'False'",
                                                                                                'remote_task_handler_kwargs': "''"},
                                                                                    'metrics': {'metrics_allow_list': "''",
                                                                                                'metrics_block_list': "''",
                                                                                                'metrics_use_pattern_match': "'False'",
                                                                                                'stat_name_handler': "''",
                                                                                                'statsd_datadog_enabled': "'False'",
                                                                                                'statsd_datadog_tags': "''",
                                                                                                'statsd_host': "'localhost'",
                                                                                                'statsd_on': "'False'",
                                                                                                'statsd_port': "'8125'",
                                                                                                'statsd_prefix': "'airflow'"},
                                                                                    'secrets': {'backend': "''",
                                                                                                'backend_kwargs': "''",
                                                                                                'cache_ttl_seconds': "'900'",
                                                                                                'use_cache': "'False'"},
                                                                                    'traces': {'otel_debugging_on': "'False'",
                                                                                               'otel_host': "'localhost'",
                                                                                               'otel_on': "'False'",
                                                                                               'otel_port': "'8889'",
                                                                                               'otel_service': "'Airflow'",
                                                                                               'otel_ssl_active': "'False'",
                                                                                               'otel_task_log_event': "'False'"}},
                                                                           'dag': '<DAG: '
                                                                                  'import_sirene>',
                                                                           'dag_run': '<DagRun '
                                                                                      'import_sirene '
                                                                                      '@ '
                                                                                      '2025-05-07 '
                                                                                      '14:48:59.689915+00:00: '
                                                                                      'manual__2025-05-07T14:48:59.689915+00:00, '
                                                                                      'state:running, '
                                                                                      'queued_at: '
                                                                                      'None. '
                                                                                      'externally '
                                                                                      'triggered: '
                                                                                      'False>',
                                                                           'data_interval_end': 'DateTime(2025, '
                                                                                                '5, '
                                                                                                '7, '
                                                                                                '14, '
                                                                                                '48, '
                                                                                                '59, '
                                                                                                '689915, '
                                                                                                "tzinfo=Timezone('UTC'))",
                                                                           'data_interval_start': 'DateTime(2025, '
                                                                                                  '5, '
                                                                                                  '7, '
                                                                                                  '14, '
                                                                                                  '48, '
                                                                                                  '59, '
                                                                                                  '689915, '
                                                                                                  "tzinfo=Timezone('UTC'))",
                                                                           'ds': "'2025-05-07'",
                                                                           'ds_nodash': "'20250507'",
                                                                           'execution_date': 'DateTime(2025, '
                                                                                             '5, '
                                                                                             '7, '
                                                                                             '14, '
                                                                                             '48, '
                                                                                             '59, '
                                                                                             '689915, '
                                                                                             "tzinfo=Timezone('UTC'))",
                                                                           'expanded_ti_count': 'None',
                                                                           'outlet_events': {}},
                                                               'self': '<Task(ExternalPythonOperator): '
                                                                       'import_stock_etablissement_historique>',
                                                               'serializable_context': {'conf': {'DEFAULT': {},
                                                                                                 'api': {'access_control_allow_headers': "''",
                                                                                                         'access_control_allow_methods': "''",
                                                                                                         'access_control_allow_origins': "''",
                                                                                                         'auth_backends': "'airflow.api.auth.backend.session'",
                                                                                                         'enable_experimental_api': "'False'",
                                                                                                         'enable_xcom_deserialize_support': "'False'",
                                                                                                         'fallback_page_limit': "'100'",
                                                                                                         'google_key_path': "''",
                                                                                                         'google_oauth2_audience': "''",
                                                                                                         'maximum_page_limit': "'100'"},
                                                                                                 'cli': {'api_client': "'airflow.api.client.local_client'",
                                                                                                         'endpoint_url': "'http://localhost:8080'"},
                                                                                                 'core': {'auth_manager': "'airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager'",
                                                                                                          'dags_are_paused_at_creation': "'True'",
                                                                                                          'dags_folder': "'/opt/airflow/dags'",
                                                                                                          'default_timezone': "'Europe/Paris'",
                                                                                                          'executor': "'LocalExecutor'",
                                                                                                          'hostname_callable': "'airflow.utils.net.getfqdn'",
                                                                                                          'max_active_runs_per_dag': "'16'",
                                                                                                          'max_active_tasks_per_dag': "'16'",
                                                                                                          'might_contain_dag_callable': "'airflow.utils.file.might_contain_dag_via_default_heuristic'",
                                                                                                          'parallelism': "'4'"},
                                                                                                 'database': {'alembic_ini_file_path': "'alembic.ini'",
                                                                                                              'load_default_connections': "'false'",
                                                                                                              'sql_alchemy_conn': "'postgresql://airflow:airflow@airflow-db:5432/airflow'",
                                                                                                              'sql_alchemy_max_overflow': "'10'",
                                                                                                              'sql_alchemy_pool_enabled': "'True'",
                                                                                                              'sql_alchemy_pool_pre_ping': "'True'",
                                                                                                              'sql_alchemy_pool_recycle': "'1800'",
                                                                                                              'sql_alchemy_pool_size': "'5'",
                                                                                                              'sql_alchemy_schema': "''",
                                                                                                              'sql_engine_encoding': "'utf-8'"},
                                                                                                 'debug': {'fail_fast': "'False'"},
                                                                                                 'logging': {'base_log_folder': "'/opt/airflow/logs'",
                                                                                                             'celery_logging_level': "''",
                                                                                                             'delete_local_logs': "'False'",
                                                                                                             'encrypt_s3_logs': "'False'",
                                                                                                             'google_key_path': "''",
                                                                                                             'logging_level': "'INFO'",
                                                                                                             'remote_base_log_folder': "''",
                                                                                                             'remote_log_conn_id': "''",
                                                                                                             'remote_logging': "'False'",
                                                                                                             'remote_task_handler_kwargs': "''"},
                                                                                                 'metrics': {'metrics_allow_list': "''",
                                                                                                             'metrics_block_list': "''",
                                                                                                             'metrics_use_pattern_match': "'False'",
                                                                                                             'stat_name_handler': "''",
                                                                                                             'statsd_datadog_enabled': "'False'",
                                                                                                             'statsd_datadog_tags': "''",
                                                                                                             'statsd_host': "'localhost'",
                                                                                                             'statsd_on': "'False'",
                                                                                                             'statsd_port': "'8125'",
                                                                                                             'statsd_prefix': "'airflow'"},
                                                                                                 'secrets': {'backend': "''",
                                                                                                             'backend_kwargs': "''",
                                                                                                             'cache_ttl_seconds': "'900'",
                                                                                                             'use_cache': "'False'"},
                                                                                                 'traces': {'otel_debugging_on': "'False'",
                                                                                                            'otel_host': "'localhost'",
                                                                                                            'otel_on': "'False'",
                                                                                                            'otel_port': "'8889'",
                                                                                                            'otel_service': "'Airflow'",
                                                                                                            'otel_ssl_active': "'False'",
                                                                                                            'otel_task_log_event': "'False'"}},
                                                                                        'dag': '<DAG: '
                                                                                               'import_sirene>',
                                                                                        'dag_run': '<DagRun '
                                                                                                   'import_sirene '
                                                                                                   '@ '
                                                                                                   '2025-05-07 '
                                                                                                   '14:48:59.689915+00:00: '
                                                                                                   'manual__2025-05-07T14:48:59.689915+00:00, '
                                                                                                   'state:running, '
                                                                                                   'queued_at: '
                                                                                                   'None. '
                                                                                                   'externally '
                                                                                                   'triggered: '
                                                                                                   'False>',
                                                                                        'data_interval_end': 'DateTime(2025, '
                                                                                                             '5, '
                                                                                                             '7, '
                                                                                                             '14, '
                                                                                                             '48, '
                                                                                                             '59, '
                                                                                                             '689915, '
                                                                                                             "tzinfo=Timezone('UTC'))",
                                                                                        'data_interval_start': 'DateTime(2025, '
                                                                                                               '5, '
                                                                                                               '7, '
                                                                                                               '14, '
                                                                                                               '48, '
                                                                                                               '59, '
                                                                                                               '689915, '
                                                                                                               "tzinfo=Timezone('UTC'))",
                                                                                        'ds': "'2025-05-07'",
                                                                                        'ds_nodash': "'20250507'",
                                                                                        'execution_date': 'DateTime(2025, '
                                                                                                          '5, '
                                                                                                          '7, '
                                                                                                          '14, '
                                                                                                          '48, '
                                                                                                          '59, '
                                                                                                          '689915, '
                                                                                                          "tzinfo=Timezone('UTC'))",
                                                                                        'expanded_ti_count': 'None',
                                                                                        'inlets': []},
                                                               'serializable_keys': ["'prev_start_date_success'",
                                                                                     "'expanded_ti_count'",
                                                                                     "'prev_execution_date'",
                                                                                     "'yesterday_ds_nodash'",
                                                                                     "'ts'",
                                                                                     "'conf'",
                                                                                     "'tomorrow_ds'",
                                                                                     "'next_ds'",
                                                                                     "'logical_date'",
                                                                                     "'triggering_dataset_events'"]}},
                                                     {'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py',
                                                      'context_line': '            '
                                                                      'return '
                                                                      'func(self, '
                                                                      '*args, '
                                                                      '**kwargs)',
                                                      'filename': 'airflow/models/baseoperator.py',
                                                      'function': 'wrapper',
                                                      'in_app': False,
                                                      'lineno': 424,
                                                      'module': 'airflow.models.baseoperator',
                                                      'post_context': ['',
                                                                       '        '
                                                                       'return '
                                                                       'wrapper',
                                                                       '',
                                                                       '',
                                                                       'class '
                                                                       'BaseOperatorMeta(abc.ABCMeta):'],
                                                      'pre_context': ['            '
                                                                      'if not '
                                                                      'cls.test_mode '
                                                                      'and not '
                                                                      'sentinel '
                                                                      '== '
                                                                      '_sentinel '
                                                                      'and not '
                                                                      'isinstance(self, '
                                                                      'DecoratedOperator):',
                                                                      '                '
                                                                      'message '
                                                                      '= '
                                                                      'f"{self.__class__.__name__}.{func.__name__} '
                                                                      'cannot '
                                                                      'be '
                                                                      'called '
                                                                      'outside '
                                                                      'TaskInstance!"',
                                                                      '                '
                                                                      'if not '
                                                                      'self.allow_nested_operators:',
                                                                      '                    '
                                                                      'raise '
                                                                      'AirflowException(message)',
                                                                      '                '
                                                                      'self.log.warning(message)'],
                                                      'vars': {'DecoratedOperator': '<class '
                                                                                    "'airflow.decorators.base.DecoratedOperator'>",
                                                               'args': [],
                                                               'cls': '<class '
                                                                      "'airflow.models.baseoperator.ExecutorSafeguard'>",
                                                               'func': '<function '
                                                                       'PythonOperator.execute '
                                                                       'at '
                                                                       '0x743622cb3b00>',
                                                               'kwargs': {'context': {'conf': {'DEFAULT': {},
                                                                                               'api': {'access_control_allow_headers': "''",
                                                                                                       'access_control_allow_methods': "''",
                                                                                                       'access_control_allow_origins': "''",
                                                                                                       'auth_backends': "'airflow.api.auth.backend.session'",
                                                                                                       'enable_experimental_api': "'False'",
                                                                                                       'enable_xcom_deserialize_support': "'False'",
                                                                                                       'fallback_page_limit': "'100'",
                                                                                                       'google_key_path': "''",
                                                                                                       'google_oauth2_audience': "''",
                                                                                                       'maximum_page_limit': "'100'"},
                                                                                               'cli': {'api_client': "'airflow.api.client.local_client'",
                                                                                                       'endpoint_url': "'http://localhost:8080'"},
                                                                                               'core': {'auth_manager': "'airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager'",
                                                                                                        'dags_are_paused_at_creation': "'True'",
                                                                                                        'dags_folder': "'/opt/airflow/dags'",
                                                                                                        'default_timezone': "'Europe/Paris'",
                                                                                                        'executor': "'LocalExecutor'",
                                                                                                        'hostname_callable': "'airflow.utils.net.getfqdn'",
                                                                                                        'max_active_runs_per_dag': "'16'",
                                                                                                        'max_active_tasks_per_dag': "'16'",
                                                                                                        'might_contain_dag_callable': "'airflow.utils.file.might_contain_dag_via_default_heuristic'",
                                                                                                        'parallelism': "'4'"},
                                                                                               'database': {'alembic_ini_file_path': "'alembic.ini'",
                                                                                                            'load_default_connections': "'false'",
                                                                                                            'sql_alchemy_conn': "'postgresql://airflow:airflow@airflow-db:5432/airflow'",
                                                                                                            'sql_alchemy_max_overflow': "'10'",
                                                                                                            'sql_alchemy_pool_enabled': "'True'",
                                                                                                            'sql_alchemy_pool_pre_ping': "'True'",
                                                                                                            'sql_alchemy_pool_recycle': "'1800'",
                                                                                                            'sql_alchemy_pool_size': "'5'",
                                                                                                            'sql_alchemy_schema': "''",
                                                                                                            'sql_engine_encoding': "'utf-8'"},
                                                                                               'debug': {'fail_fast': "'False'"},
                                                                                               'logging': {'base_log_folder': "'/opt/airflow/logs'",
                                                                                                           'celery_logging_level': "''",
                                                                                                           'delete_local_logs': "'False'",
                                                                                                           'encrypt_s3_logs': "'False'",
                                                                                                           'google_key_path': "''",
                                                                                                           'logging_level': "'INFO'",
                                                                                                           'remote_base_log_folder': "''",
                                                                                                           'remote_log_conn_id': "''",
                                                                                                           'remote_logging': "'False'",
                                                                                                           'remote_task_handler_kwargs': "''"},
                                                                                               'metrics': {'metrics_allow_list': "''",
                                                                                                           'metrics_block_list': "''",
                                                                                                           'metrics_use_pattern_match': "'False'",
                                                                                                           'stat_name_handler': "''",
                                                                                                           'statsd_datadog_enabled': "'False'",
                                                                                                           'statsd_datadog_tags': "''",
                                                                                                           'statsd_host': "'localhost'",
                                                                                                           'statsd_on': "'False'",
                                                                                                           'statsd_port': "'8125'",
                                                                                                           'statsd_prefix': "'airflow'"},
                                                                                               'secrets': {'backend': "''",
                                                                                                           'backend_kwargs': "''",
                                                                                                           'cache_ttl_seconds': "'900'",
                                                                                                           'use_cache': "'False'"},
                                                                                               'traces': {'otel_debugging_on': "'False'",
                                                                                                          'otel_host': "'localhost'",
                                                                                                          'otel_on': "'False'",
                                                                                                          'otel_port': "'8889'",
                                                                                                          'otel_service': "'Airflow'",
                                                                                                          'otel_ssl_active': "'False'",
                                                                                                          'otel_task_log_event': "'False'"}},
                                                                                      'dag': '<DAG: '
                                                                                             'import_sirene>',
                                                                                      'dag_run': '<DagRun '
                                                                                                 'import_sirene '
                                                                                                 '@ '
                                                                                                 '2025-05-07 '
                                                                                                 '14:48:59.689915+00:00: '
                                                                                                 'manual__2025-05-07T14:48:59.689915+00:00, '
                                                                                                 'state:running, '
                                                                                                 'queued_at: '
                                                                                                 'None. '
                                                                                                 'externally '
                                                                                                 'triggered: '
                                                                                                 'False>',
                                                                                      'data_interval_end': 'DateTime(2025, '
                                                                                                           '5, '
                                                                                                           '7, '
                                                                                                           '14, '
                                                                                                           '48, '
                                                                                                           '59, '
                                                                                                           '689915, '
                                                                                                           "tzinfo=Timezone('UTC'))",
                                                                                      'data_interval_start': 'DateTime(2025, '
                                                                                                             '5, '
                                                                                                             '7, '
                                                                                                             '14, '
                                                                                                             '48, '
                                                                                                             '59, '
                                                                                                             '689915, '
                                                                                                             "tzinfo=Timezone('UTC'))",
                                                                                      'ds': "'2025-05-07'",
                                                                                      'ds_nodash': "'20250507'",
                                                                                      'execution_date': 'DateTime(2025, '
                                                                                                        '5, '
                                                                                                        '7, '
                                                                                                        '14, '
                                                                                                        '48, '
                                                                                                        '59, '
                                                                                                        '689915, '
                                                                                                        "tzinfo=Timezone('UTC'))",
                                                                                      'expanded_ti_count': 'None',
                                                                                      'inlets': []}},
                                                               'message': "'ExternalPythonOperator.execute "
                                                                          'cannot '
                                                                          'be '
                                                                          'called '
                                                                          'outside '
                                                                          "TaskInstance!'",
                                                               'self': '<Task(ExternalPythonOperator): '
                                                                       'import_stock_etablissement_historique>',
                                                               'sentinel': 'None',
                                                               'sentinel_key': "'ExternalPythonOperator__sentinel'"}},
                                                     {'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py',
                                                      'context_line': '        '
                                                                      'return_value '
                                                                      '= '
                                                                      'self.execute_callable()',
                                                      'filename': 'airflow/operators/python.py',
                                                      'function': 'execute',
                                                      'in_app': False,
                                                      'lineno': 238,
                                                      'module': 'airflow.operators.python',
                                                      'post_context': ['        '
                                                                       'if '
                                                                       'self.show_return_value_in_logs:',
                                                                       '            '
                                                                       'self.log.info("Done. '
                                                                       'Returned '
                                                                       'value '
                                                                       'was: '
                                                                       '%s", '
                                                                       'return_value)',
                                                                       '        '
                                                                       'else:',
                                                                       '            '
                                                                       'self.log.info("Done. '
                                                                       'Returned '
                                                                       'value '
                                                                       'not '
                                                                       'shown")',
                                                                       ''],
                                                      'pre_context': ['    def '
                                                                      'execute(self, '
                                                                      'context: '
                                                                      'Context) '
                                                                      '-> Any:',
                                                                      '        '
                                                                      'context_merge(context, '
                                                                      'self.op_kwargs, '
                                                                      'templates_dict=self.templates_dict)',
                                                                      '        '
                                                                      'self.op_kwargs '
                                                                      '= '
                                                                      'self.determine_kwargs(context)',
                                                                      '        '
                                                                      'self._dataset_events '
                                                                      '= '
                                                                      'context_get_outlet_events(context)',
                                                                      ''],
                                                      'vars': {'context': {'conf': {'DEFAULT': {},
                                                                                    'api': {'access_control_allow_headers': "''",
                                                                                            'access_control_allow_methods': "''",
                                                                                            'access_control_allow_origins': "''",
                                                                                            'auth_backends': "'airflow.api.auth.backend.session'",
                                                                                            'enable_experimental_api': "'False'",
                                                                                            'enable_xcom_deserialize_support': "'False'",
                                                                                            'fallback_page_limit': "'100'",
                                                                                            'google_key_path': "''",
                                                                                            'google_oauth2_audience': "''",
                                                                                            'maximum_page_limit': "'100'"},
                                                                                    'cli': {'api_client': "'airflow.api.client.local_client'",
                                                                                            'endpoint_url': "'http://localhost:8080'"},
                                                                                    'core': {'auth_manager': "'airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager'",
                                                                                             'dags_are_paused_at_creation': "'True'",
                                                                                             'dags_folder': "'/opt/airflow/dags'",
                                                                                             'default_timezone': "'Europe/Paris'",
                                                                                             'executor': "'LocalExecutor'",
                                                                                             'hostname_callable': "'airflow.utils.net.getfqdn'",
                                                                                             'max_active_runs_per_dag': "'16'",
                                                                                             'max_active_tasks_per_dag': "'16'",
                                                                                             'might_contain_dag_callable': "'airflow.utils.file.might_contain_dag_via_default_heuristic'",
                                                                                             'parallelism': "'4'"},
                                                                                    'database': {'alembic_ini_file_path': "'alembic.ini'",
                                                                                                 'load_default_connections': "'false'",
                                                                                                 'sql_alchemy_conn': "'postgresql://airflow:airflow@airflow-db:5432/airflow'",
                                                                                                 'sql_alchemy_max_overflow': "'10'",
                                                                                                 'sql_alchemy_pool_enabled': "'True'",
                                                                                                 'sql_alchemy_pool_pre_ping': "'True'",
                                                                                                 'sql_alchemy_pool_recycle': "'1800'",
                                                                                                 'sql_alchemy_pool_size': "'5'",
                                                                                                 'sql_alchemy_schema': "''",
                                                                                                 'sql_engine_encoding': "'utf-8'"},
                                                                                    'debug': {'fail_fast': "'False'"},
                                                                                    'logging': {'base_log_folder': "'/opt/airflow/logs'",
                                                                                                'celery_logging_level': "''",
                                                                                                'delete_local_logs': "'False'",
                                                                                                'encrypt_s3_logs': "'False'",
                                                                                                'google_key_path': "''",
                                                                                                'logging_level': "'INFO'",
                                                                                                'remote_base_log_folder': "''",
                                                                                                'remote_log_conn_id': "''",
                                                                                                'remote_logging': "'False'",
                                                                                                'remote_task_handler_kwargs': "''"},
                                                                                    'metrics': {'metrics_allow_list': "''",
                                                                                                'metrics_block_list': "''",
                                                                                                'metrics_use_pattern_match': "'False'",
                                                                                                'stat_name_handler': "''",
                                                                                                'statsd_datadog_enabled': "'False'",
                                                                                                'statsd_datadog_tags': "''",
                                                                                                'statsd_host': "'localhost'",
                                                                                                'statsd_on': "'False'",
                                                                                                'statsd_port': "'8125'",
                                                                                                'statsd_prefix': "'airflow'"},
                                                                                    'secrets': {'backend': "''",
                                                                                                'backend_kwargs': "''",
                                                                                                'cache_ttl_seconds': "'900'",
                                                                                                'use_cache': "'False'"},
                                                                                    'traces': {'otel_debugging_on': "'False'",
                                                                                               'otel_host': "'localhost'",
                                                                                               'otel_on': "'False'",
                                                                                               'otel_port': "'8889'",
                                                                                               'otel_service': "'Airflow'",
                                                                                               'otel_ssl_active': "'False'",
                                                                                               'otel_task_log_event': "'False'"}},
                                                                           'dag': '<DAG: '
                                                                                  'import_sirene>',
                                                                           'dag_run': '<DagRun '
                                                                                      'import_sirene '
                                                                                      '@ '
                                                                                      '2025-05-07 '
                                                                                      '14:48:59.689915+00:00: '
                                                                                      'manual__2025-05-07T14:48:59.689915+00:00, '
                                                                                      'state:running, '
                                                                                      'queued_at: '
                                                                                      'None. '
                                                                                      'externally '
                                                                                      'triggered: '
                                                                                      'False>',
                                                                           'data_interval_end': 'DateTime(2025, '
                                                                                                '5, '
                                                                                                '7, '
                                                                                                '14, '
                                                                                                '48, '
                                                                                                '59, '
                                                                                                '689915, '
                                                                                                "tzinfo=Timezone('UTC'))",
                                                                           'data_interval_start': 'DateTime(2025, '
                                                                                                  '5, '
                                                                                                  '7, '
                                                                                                  '14, '
                                                                                                  '48, '
                                                                                                  '59, '
                                                                                                  '689915, '
                                                                                                  "tzinfo=Timezone('UTC'))",
                                                                           'ds': "'2025-05-07'",
                                                                           'ds_nodash': "'20250507'",
                                                                           'execution_date': 'DateTime(2025, '
                                                                                             '5, '
                                                                                             '7, '
                                                                                             '14, '
                                                                                             '48, '
                                                                                             '59, '
                                                                                             '689915, '
                                                                                             "tzinfo=Timezone('UTC'))",
                                                                           'expanded_ti_count': 'None',
                                                                           'inlets': []},
                                                               'self': '<Task(ExternalPythonOperator): '
                                                                       'import_stock_etablissement_historique>'}},
                                                     {'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py',
                                                      'context_line': '        '
                                                                      'return '
                                                                      'self._execute_python_callable_in_subprocess(python_path)',
                                                      'filename': 'airflow/operators/python.py',
                                                      'function': 'execute_callable',
                                                      'in_app': False,
                                                      'lineno': 1024,
                                                      'module': 'airflow.operators.python',
                                                      'post_context': ['',
                                                                       '    '
                                                                       'def '
                                                                       '_iter_serializable_context_keys(self):',
                                                                       '        '
                                                                       'yield '
                                                                       'from '
                                                                       'self.BASE_SERIALIZABLE_CONTEXT_KEYS',
                                                                       '        '
                                                                       'if '
                                                                       'self._get_airflow_version_from_target_env():',
                                                                       '            '
                                                                       'yield '
                                                                       'from '
                                                                       'self.AIRFLOW_SERIALIZABLE_CONTEXT_KEYS'],
                                                      'pre_context': ['                '
                                                                      '"Passing '
                                                                      'op_args '
                                                                      'or '
                                                                      'op_kwargs '
                                                                      'is not '
                                                                      'supported '
                                                                      'across '
                                                                      'different '
                                                                      'Python '
                                                                      '"',
                                                                      '                '
                                                                      '"major '
                                                                      'versions '
                                                                      'for '
                                                                      'ExternalPythonOperator. '
                                                                      'Please '
                                                                      'use '
                                                                      'string_args."',
                                                                      '                '
                                                                      'f"Sys '
                                                                      'version: '
                                                                      '{sys.version_info}. '
                                                                      '"',
                                                                      '                '
                                                                      'f"Virtual '
                                                                      'environment '
                                                                      'version: '
                                                                      '{python_version}"',
                                                                      '            '
                                                                      ')'],
                                                      'vars': {'python_path': "PosixPath('/opt/airflow/venvs/python/venv/bin/python')",
                                                               'python_version': ['3',
                                                                                  '12',
                                                                                  '9',
                                                                                  "'final'",
                                                                                  '0'],
                                                               'self': '<Task(ExternalPythonOperator): '
                                                                       'import_stock_etablissement_historique>'}},
                                                     {'abs_path': '/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py',
                                                      'context_line': '                    '
                                                                      'raise '
                                                                      'AirflowException(error_msg) '
                                                                      'from '
                                                                      'None',
                                                      'filename': 'airflow/operators/python.py',
                                                      'function': '_execute_python_callable_in_subprocess',
                                                      'in_app': False,
                                                      'lineno': 588,
                                                      'module': 'airflow.operators.python',
                                                      'post_context': ['                '
                                                                       'else:',
                                                                       '                    '
                                                                       'raise',
                                                                       '',
                                                                       '            '
                                                                       'if 0 '
                                                                       'in '
                                                                       'self.skip_on_exit_code:',
                                                                       '                '
                                                                       'raise '
                                                                       'AirflowSkipException("Process '
                                                                       'exited '
                                                                       'with '
                                                                       'code '
                                                                       '0. '
                                                                       'Skipping.")'],
                                                      'pre_context': ['                    '
                                                                      'raise '
                                                                      'AirflowSkipException(f"Process '
                                                                      'exited '
                                                                      'with '
                                                                      'code '
                                                                      '{e.returncode}. '
                                                                      'Skipping.")',
                                                                      '                '
                                                                      'elif '
                                                                      'termination_log_path.exists() '
                                                                      'and '
                                                                      'termination_log_path.stat().st_size '
                                                                      '> 0:',
                                                                      '                    '
                                                                      'error_msg '
                                                                      '= '
                                                                      'f"Process '
                                                                      'returned '
                                                                      'non-zero '
                                                                      'exit '
                                                                      'status '
                                                                      '{e.returncode}.\\n"',
                                                                      '                    '
                                                                      'with '
                                                                      'open(termination_log_path) '
                                                                      'as '
                                                                      'file:',
                                                                      '                        '
                                                                      'error_msg '
                                                                      '+= '
                                                                      'file.read()'],
                                                      'vars': {'input_path': "PosixPath('/tmp/venv-callnafp1l13/script.in')",
                                                               'op_kwargs': {},
                                                               'output_path': "PosixPath('/tmp/venv-callnafp1l13/script.out')",
                                                               'python_path': "PosixPath('/opt/airflow/venvs/python/venv/bin/python')",
                                                               'script_path': "PosixPath('/tmp/venv-callnafp1l13/script.py')",
                                                               'self': '<Task(ExternalPythonOperator): '
                                                                       'import_stock_etablissement_historique>',
                                                               'string_args_path': "PosixPath('/tmp/venv-callnafp1l13/string_args.txt')",
                                                               'termination_log_path': "PosixPath('/tmp/venv-callnafp1l13/termination.log')",
                                                               'tmp': "'/tmp/venv-callnafp1l13'",
                                                               'tmp_dir': "PosixPath('/tmp/venv-callnafp1l13')"}}]},
                           'type': 'AirflowException',
                           'value': 'Process returned non-zero exit status 1.\n'
                                    "'forced error'"}]},
 'extra': {'sys.argv': ['/home/airflow/.local/bin/airflow',
                        'dags',
                        'test',
                        'import_sirene']},
 'fingerprint': ['{{ default }}', 'import_sirene'],
 'level': 'error',
 'modules': {'adal': '1.2.7',
             'adlfs': '2024.12.0',
             'aiobotocore': '2.19.0',
             'aiofiles': '23.2.1',
             'aiohappyeyeballs': '2.4.4',
             'aiohttp': '3.11.11',
             'aioitertools': '0.12.0',
             'aiomysql': '0.2.0',
             'aiosignal': '1.3.2',
             'aiosqlite': '0.20.0',
             'alembic': '1.14.1',
             'amqp': '5.3.1',
             'annotated-types': '0.7.0',
             'anyio': '4.8.0',
             'apache-airflow': '2.10.5',
             'apache-airflow-providers-amazon': '9.2.0',
             'apache-airflow-providers-celery': '3.10.0',
             'apache-airflow-providers-cncf-kubernetes': '10.1.0',
             'apache-airflow-providers-common-compat': '1.3.0',
             'apache-airflow-providers-common-io': '1.5.0',
             'apache-airflow-providers-common-sql': '1.21.0',
             'apache-airflow-providers-docker': '4.0.0',
             'apache-airflow-providers-elasticsearch': '6.0.0',
             'apache-airflow-providers-fab': '1.5.2',
             'apache-airflow-providers-ftp': '3.12.0',
             'apache-airflow-providers-google': '12.0.0',
             'apache-airflow-providers-grpc': '3.7.0',
             'apache-airflow-providers-hashicorp': '4.0.0',
             'apache-airflow-providers-http': '5.0.0',
             'apache-airflow-providers-imap': '3.8.0',
             'apache-airflow-providers-microsoft-azure': '12.0.0',
             'apache-airflow-providers-mysql': '6.0.0',
             'apache-airflow-providers-odbc': '4.9.0',
             'apache-airflow-providers-openlineage': '2.0.0',
             'apache-airflow-providers-postgres': '6.0.0',
             'apache-airflow-providers-redis': '4.0.0',
             'apache-airflow-providers-sendgrid': '4.0.0',
             'apache-airflow-providers-sftp': '5.0.0',
             'apache-airflow-providers-slack': '9.0.0',
             'apache-airflow-providers-smtp': '1.9.0',
             'apache-airflow-providers-snowflake': '6.0.0',
             'apache-airflow-providers-sqlite': '4.0.0',
             'apache-airflow-providers-ssh': '4.0.0',
             'apispec': '6.8.1',
             'argcomplete': '3.5.3',
             'asgiref': '3.8.1',
             'asn1crypto': '1.5.1',
             'asyncpg': '0.30.0',
             'asyncssh': '2.19.0',
             'attrs': '25.1.0',
             'authlib': '1.3.1',
             'azure-batch': '14.2.0',
             'azure-common': '1.1.28',
             'azure-core': '1.32.0',
             'azure-cosmos': '4.9.0',
             'azure-datalake-store': '0.0.53',
             'azure-identity': '1.19.0',
             'azure-keyvault-secrets': '4.9.0',
             'azure-kusto-data': '4.6.3',
             'azure-mgmt-containerinstance': '10.1.0',
             'azure-mgmt-containerregistry': '10.3.0',
             'azure-mgmt-core': '1.5.0',
             'azure-mgmt-cosmosdb': '9.7.0',
             'azure-mgmt-datafactory': '9.1.0',
             'azure-mgmt-datalake-nspkg': '3.0.1',
             'azure-mgmt-datalake-store': '0.5.0',
             'azure-mgmt-nspkg': '3.0.2',
             'azure-mgmt-resource': '23.2.0',
             'azure-mgmt-storage': '22.0.0',
             'azure-nspkg': '3.0.2',
             'azure-servicebus': '7.13.0',
             'azure-storage-blob': '12.24.1',
             'azure-storage-file-datalake': '12.18.1',
             'azure-storage-file-share': '12.20.1',
             'azure-synapse-artifacts': '0.19.0',
             'azure-synapse-spark': '0.7.0',
             'babel': '2.17.0',
             'backoff': '2.2.1',
             'bcrypt': '4.2.1',
             'beautifulsoup4': '4.13.0',
             'billiard': '4.2.1',
             'blinker': '1.9.0',
             'boto3': '1.36.3',
             'botocore': '1.36.3',
             'cachelib': '0.9.0',
             'cachetools': '5.5.1',
             'cattrs': '24.1.2',
             'celery': '5.4.0',
             'certifi': '2025.1.31',
             'cffi': '1.17.1',
             'chardet': '5.2.0',
             'charset-normalizer': '3.4.1',
             'click': '8.1.8',
             'click-didyoumean': '0.3.1',
             'click-plugins': '1.1.1',
             'click-repl': '0.3.0',
             'clickclick': '20.10.2',
             'colorama': '0.4.6',
             'colorlog': '6.9.0',
             'configupdater': '3.2',
             'connexion': '2.14.2',
             'cron-descriptor': '1.4.5',
             'croniter': '6.0.0',
             'cryptography': '42.0.8',
             'data-inclusion-scripts': '0.0.1',
             'db-dtypes': '1.4.0',
             'decorator': '5.1.1',
             'deprecated': '1.2.18',
             'dill': '0.3.9',
             'distlib': '0.3.9',
             'dnspython': '2.7.0',
             'docker': '7.1.0',
             'docstring_parser': '0.16',
             'elastic-transport': '8.17.0',
             'elasticsearch': '8.17.1',
             'email_validator': '2.2.0',
             'eventlet': '0.39.0',
             'filelock': '3.17.0',
             'flask': '2.2.5',
             'flask-appbuilder': '4.5.2',
             'flask-babel': '2.0.0',
             'flask-caching': '2.3.0',
             'flask-jwt-extended': '4.7.1',
             'flask-limiter': '3.10.1',
             'flask-login': '0.6.3',
             'flask-session': '0.5.0',
             'flask-sqlalchemy': '2.5.1',
             'flask-wtf': '1.2.2',
             'flower': '2.0.1',
             'frozenlist': '1.5.0',
             'fsspec': '2025.2.0',
             'gcloud-aio-auth': '5.3.2',
             'gcloud-aio-bigquery': '7.1.0',
             'gcloud-aio-storage': '9.3.0',
             'gcsfs': '2025.2.0',
             'gevent': '24.11.1',
             'google-ads': '25.1.0',
             'google-analytics-admin': '0.23.3',
             'google-api-core': '2.24.1',
             'google-api-python-client': '2.160.0',
             'google-auth': '2.38.0',
             'google-auth-httplib2': '0.2.0',
             'google-auth-oauthlib': '1.2.1',
             'google-cloud-aiplatform': '1.79.0',
             'google-cloud-alloydb': '0.4.1',
             'google-cloud-appengine-logging': '1.5.0',
             'google-cloud-audit-log': '0.3.0',
             'google-cloud-automl': '2.15.0',
             'google-cloud-batch': '0.17.33',
             'google-cloud-bigquery': '3.20.1',
             'google-cloud-bigquery-datatransfer': '3.18.0',
             'google-cloud-bigtable': '2.28.1',
             'google-cloud-build': '3.29.0',
             'google-cloud-compute': '1.24.0',
             'google-cloud-container': '2.55.1',
             'google-cloud-core': '2.4.1',
             'google-cloud-datacatalog': '3.24.1',
             'google-cloud-dataflow-client': '0.8.15',
             'google-cloud-dataform': '0.5.14',
             'google-cloud-dataplex': '2.6.0',
             'google-cloud-dataproc': '5.16.0',
             'google-cloud-dataproc-metastore': '1.17.0',
             'google-cloud-dlp': '3.26.0',
             'google-cloud-kms': '3.2.2',
             'google-cloud-language': '2.16.0',
             'google-cloud-logging': '3.11.4',
             'google-cloud-memcache': '1.11.0',
             'google-cloud-monitoring': '2.26.0',
             'google-cloud-orchestration-airflow': '1.16.1',
             'google-cloud-os-login': '2.16.0',
             'google-cloud-pubsub': '2.28.0',
             'google-cloud-redis': '2.17.0',
             'google-cloud-resource-manager': '1.14.0',
             'google-cloud-run': '0.10.14',
             'google-cloud-secret-manager': '2.22.1',
             'google-cloud-spanner': '3.51.0',
             'google-cloud-speech': '2.30.0',
             'google-cloud-storage': '2.19.0',
             'google-cloud-storage-transfer': '1.15.0',
             'google-cloud-tasks': '2.18.0',
             'google-cloud-texttospeech': '2.24.0',
             'google-cloud-translate': '3.19.0',
             'google-cloud-videointelligence': '2.15.0',
             'google-cloud-vision': '3.9.0',
             'google-cloud-workflows': '1.16.0',
             'google-crc32c': '1.6.0',
             'google-re2': '1.1.20240702',
             'google-resumable-media': '2.7.2',
             'googleapis-common-protos': '1.66.0',
             'graphviz': '0.20.3',
             'greenlet': '3.1.1',
             'grpc-google-iam-v1': '0.14.0',
             'grpc-interceptor': '0.15.4',
             'grpcio': '1.70.0',
             'grpcio-gcp': '0.2.2',
             'grpcio-status': '1.62.3',
             'gunicorn': '23.0.0',
             'h11': '0.16.0',
             'h2': '4.2.0',
             'hpack': '4.1.0',
             'httpcore': '1.0.9',
             'httplib2': '0.22.0',
             'httpx': '0.27.0',
             'humanize': '4.11.0',
             'hvac': '2.3.0',
             'hyperframe': '6.1.0',
             'idna': '3.10',
             'ijson': '3.3.0',
             'immutabledict': '4.2.1',
             'importlib-metadata': '6.11.0',
             'inflection': '0.5.1',
             'iniconfig': '2.0.0',
             'isodate': '0.7.2',
             'itsdangerous': '2.2.0',
             'jinja2': '3.1.5',
             'jmespath': '0.10.0',
             'json-merge-patch': '0.2',
             'jsonpath-ng': '1.7.0',
             'jsonschema': '4.23.0',
             'jsonschema-specifications': '2024.10.1',
             'kombu': '5.4.2',
             'kubernetes': '30.1.0',
             'kubernetes_asyncio': '30.1.0',
             'lazy-object-proxy': '1.10.0',
             'ldap3': '2.9.1',
             'limits': '4.0.1',
             'linkify-it-py': '2.0.3',
             'lockfile': '0.12.2',
             'looker-sdk': '25.0.0',
             'lxml': '5.3.0',
             'mako': '1.3.8',
             'markdown-it-py': '3.0.0',
             'markupsafe': '3.0.2',
             'marshmallow': '3.26.0',
             'marshmallow-oneofschema': '3.1.1',
             'marshmallow-sqlalchemy': '0.28.2',
             'mdit-py-plugins': '0.4.2',
             'mdurl': '0.1.2',
             'methodtools': '0.4.7',
             'microsoft-kiota-abstractions': '1.3.3',
             'microsoft-kiota-authentication-azure': '1.1.0',
             'microsoft-kiota-http': '1.3.3',
             'microsoft-kiota-serialization-json': '1.0.0',
             'microsoft-kiota-serialization-text': '1.0.0',
             'more-itertools': '10.6.0',
             'msal': '1.31.1',
             'msal-extensions': '1.2.0',
             'msgraph-core': '1.2.1',
             'msrest': '0.7.1',
             'msrestazure': '0.6.4.post1',
             'multidict': '6.1.0',
             'mysql-connector-python': '9.2.0',
             'mysqlclient': '2.2.7',
             'numpy': '1.26.4',
             'oauthlib': '3.2.2',
             'openlineage-integration-common': '1.27.0',
             'openlineage-python': '1.27.0',
             'openlineage_sql': '1.27.0',
             'opentelemetry-api': '1.27.0',
             'opentelemetry-exporter-otlp': '1.27.0',
             'opentelemetry-exporter-otlp-proto-common': '1.27.0',
             'opentelemetry-exporter-otlp-proto-grpc': '1.27.0',
             'opentelemetry-exporter-otlp-proto-http': '1.27.0',
             'opentelemetry-proto': '1.27.0',
             'opentelemetry-sdk': '1.27.0',
             'opentelemetry-semantic-conventions': '0.48b0',
             'ordered-set': '4.1.0',
             'packaging': '24.2',
             'pandas': '2.1.4',
             'pandas-gbq': '0.26.1',
             'paramiko': '3.5.0',
             'pathspec': '0.12.1',
             'pendulum': '3.0.0',
             'pip': '25.0',
             'platformdirs': '4.3.6',
             'pluggy': '1.5.0',
             'ply': '3.11',
             'portalocker': '2.10.1',
             'prison': '0.2.1',
             'prometheus_client': '0.21.1',
             'prompt_toolkit': '3.0.50',
             'propcache': '0.2.1',
             'proto-plus': '1.26.0',
             'protobuf': '4.25.6',
             'psutil': '6.1.1',
             'psycopg2-binary': '2.9.10',
             'pyarrow': '19.0.0',
             'pyasn1': '0.6.1',
             'pyasn1_modules': '0.4.0',
             'pyathena': '3.12.2',
             'pycparser': '2.22',
             'pydantic': '2.10.6',
             'pydantic_core': '2.27.2',
             'pydata-google-auth': '1.9.1',
             'pygments': '2.19.1',
             'pyjwt': '2.10.1',
             'pymysql': '1.1.1',
             'pynacl': '1.5.0',
             'pyodbc': '5.2.0',
             'pyopenssl': '24.3.0',
             'pyparsing': '3.2.1',
             'pytest': '8.3.4',
             'python-daemon': '3.1.2',
             'python-dateutil': '2.9.0.post0',
             'python-dotenv': '1.0.1',
             'python-http-client': '3.3.7',
             'python-ldap': '3.4.4',
             'python-nvd3': '0.16.0',
             'python-slugify': '8.0.4',
             'python3-saml': '1.16.0',
             'pytz': '2025.1',
             'pyyaml': '6.0.2',
             'redis': '5.2.1',
             'redshift-connector': '2.1.5',
             'referencing': '0.36.2',
             'requests': '2.32.3',
             'requests-mock': '1.12.1',
             'requests-oauthlib': '1.3.1',
             'requests-toolbelt': '1.0.0',
             'rfc3339-validator': '0.1.4',
             'rich': '13.9.4',
             'rich-argparse': '1.6.0',
             'rpds-py': '0.22.3',
             'rsa': '4.9',
             's3transfer': '0.11.2',
             'scramp': '1.4.5',
             'sendgrid': '6.11.0',
             'sentry-sdk': '2.20.0',
             'setproctitle': '1.3.4',
             'setuptools': '75.8.0',
             'shapely': '2.0.7',
             'six': '1.17.0',
             'slack_sdk': '3.34.0',
             'sniffio': '1.3.1',
             'snowflake-connector-python': '3.13.2',
             'snowflake-sqlalchemy': '1.7.3',
             'sortedcontainers': '2.4.0',
             'soupsieve': '2.6',
             'sqlalchemy': '1.4.54',
             'sqlalchemy-bigquery': '1.12.1',
             'sqlalchemy-jsonfield': '1.0.2',
             'sqlalchemy-spanner': '1.8.0',
             'sqlalchemy-utils': '0.41.2',
             'sqlparse': '0.5.3',
             'sshtunnel': '0.4.0',
             'starkbank-ecdsa': '2.2.0',
             'statsd': '4.0.1',
             'std-uritemplate': '2.0.1',
             'tabulate': '0.9.0',
             'tenacity': '9.0.0',
             'termcolor': '2.5.0',
             'text-unidecode': '1.3',
             'time-machine': '2.16.0',
             'tomlkit': '0.13.2',
             'tornado': '6.4.2',
             'typing_extensions': '4.12.2',
             'tzdata': '2025.1',
             'uc-micro-py': '1.0.3',
             'universal_pathlib': '0.2.6',
             'uritemplate': '4.1.1',
             'urllib3': '2.3.0',
             'uv': '0.5.24',
             'vine': '5.1.0',
             'virtualenv': '20.29.1',
             'watchtower': '3.3.1',
             'wcwidth': '0.2.13',
             'websocket-client': '1.8.0',
             'werkzeug': '2.2.3',
             'wirerope': '1.0.0',
             'wrapt': '1.17.2',
             'wtforms': '3.2.1',
             'xmlsec': '1.3.14',
             'yarl': '1.18.3',
             'zipp': '3.21.0',
             'zope.event': '5.0',
             'zope.interface': '7.2'},
 'platform': 'python',
 'release': '',
 'sdk': {'integrations': ['aiohttp',
                          'argv',
                          'asyncpg',
                          'atexit',
                          'boto3',
                          'celery',
                          'dedupe',
                          'excepthook',
                          'flask',
                          'httpx',
                          'logging',
                          'modules',
                          'redis',
                          'sqlalchemy',
                          'stdlib',
                          'threading',
                          'tornado'],
         'name': 'sentry.python.flask',
         'packages': [{'name': 'pypi:sentry-sdk', 'version': '2.20.0'}],
         'version': '2.20.0'},
 'server_name': '5ec9965d35e5',
 'tags': {'dag_id': 'import_sirene',
          'data_interval_end': '2025-05-07T14:48:59.689915Z',
          'data_interval_start': '2025-05-07T14:48:59.689915Z',
          'execution_date': '2025-05-07T14:48:59.689915Z',
          'operator': 'ExternalPythonOperator',
          'task_id': 'import_stock_etablissement_historique',
          'try_number': 1},
 'timestamp': '2025-05-07T14:49:01.711066Z',
 'transaction_info': {}}
=====================
{'attachments': [],
 'exc_info': (<class 'airflow.exceptions.AirflowException'>,
              AirflowException("Process returned non-zero exit status 1.\n'forced error'"),
              <traceback object at 0x74362290ee40>)}
[2025-05-07T14:49:01.763+0000] {dag.py:3090} ERROR - Task failed; ti=<TaskInstance: import_sirene.import_stock_etablissement_historique manual__2025-05-07T14:48:59.689915+00:00 [failed]>
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 3083, in test
    _run_task(
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/dag.py", line 4400, in _run_task
    ti._run_raw_task(session=session, raise_on_defer=inline_trigger, mark_success=mark_success)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/session.py", line 94, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/sentry.py", line 186, in wrapper
    return func(_self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 3006, in _run_raw_task
    return _run_raw_task(
           ^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 274, in _run_raw_task
    TaskInstance._execute_task_with_callbacks(
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 3161, in _execute_task_with_callbacks
    result = self._execute_task(context, task_orig)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 3185, in _execute_task
    return _execute_task(self, context, task_orig)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 768, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 734, in _execute_callable
    return ExecutionCallableRunner(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/operator_helpers.py", line 252, in run
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 424, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 505, in execute
    return super().execute(context=serializable_context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 424, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 238, in execute
    return_value = self.execute_callable()
                   ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 1024, in execute_callable
    return self._execute_python_callable_in_subprocess(python_path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 588, in _execute_python_callable_in_subprocess
    raise AirflowException(error_msg) from None
airflow.exceptions.AirflowException: Process returned non-zero exit status 1.
'forced error'
[2025-05-07T14:49:01.812+0000] {dagrun.py:823} ERROR - Marking run <DagRun import_sirene @ 2025-05-07 14:48:59.689915+00:00: manual__2025-05-07T14:48:59.689915+00:00, state:running, queued_at: None. externally triggered: False> failed
{'_meta': {'breadcrumbs': {'values': {'103': {'message': {'': {'len': 1837,
                                                               'rem': [['!limit',
                                                                        'x',
                                                                        1021,
                                                                        1024]]}}},
                                      '72': {'message': {'': {'len': 1843,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '73': {'message': {'': {'len': 1887,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '78': {'message': {'': {'len': 1577,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '82': {'message': {'': {'len': 1837,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '83': {'message': {'': {'len': 1670,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '86': {'message': {'': {'len': 1577,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '91': {'message': {'': {'len': 1837,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}},
                                      '95': {'message': {'': {'len': 1577,
                                                              'rem': [['!limit',
                                                                       'x',
                                                                       1021,
                                                                       1024]]}}}}}},
 'breadcrumbs': {'values': [{'category': 'subprocess',
                             'data': {'thread.id': '127776040237952',
                                      'thread.name': 'MainThread'},
                             'message': 'file -b /usr/local/bin/python3.12',
                             'timestamp': '2025-05-07T14:48:59.084599Z',
                             'type': 'subprocess'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.833011Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.833430Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.833992Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.834416Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.834987Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.835358Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.835875Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.836240Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.836751Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.837097Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.837633Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.838014Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.838604Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.838983Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.839479Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.839852Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.840361Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.840725Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.841251Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.841605Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.842204Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.842570Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.843090Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.843457Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.843966Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.844314Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.844828Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.845188Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.845857Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.846221Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.866538Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.867443Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.869171Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.869567Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.870983Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.871391Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.872546Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.872929Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.874067Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.874456Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.875790Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.876214Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.877427Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.877815Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.879165Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.879548Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.880780Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.881250Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.882637Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.883040Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.884015Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.884394Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.885752Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.886145Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.887322Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.887722Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.889071Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.890143Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.891647Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.892061Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.893294Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.893742Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.902792Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.903273Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.906294Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.906748Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.907357Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.907734Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.910618Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.911024Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT variable.val, variable.id, '
                                        'variable.key, variable.description, '
                                        'variable.is_encrypted \n'
                                        'FROM variable \n'
                                        'WHERE variable.key = %(key_1)s \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:48:59.920472Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:48:59.931551Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:48:59.934504Z',
                             'type': 'default'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:48:59.935+0000'},
                             'level': 'info',
                             'message': 'dagrun id: import_sirene',
                             'timestamp': '2025-05-07T14:48:59.935493Z',
                             'type': 'log'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT dag_run.state, dag_run.id, '
                                        'dag_run.dag_id, dag_run.queued_at, '
                                        'dag_run.execution_date, '
                                        'dag_run.start_date, dag_run.end_date, '
                                        'dag_run.run_id, '
                                        'dag_run.creating_job_id, '
                                        'dag_run.external_trigger, '
                                        'dag_run.run_type, dag_run.conf, '
                                        'dag_run.data_interval_start, '
                                        'dag_run.data_interval_end, '
                                        'dag_run.last_scheduling_decision, '
                                        'dag_run.dag_hash, '
                                        'dag_run.log_template_id, '
                                        'dag_run.updated_at, '
                                        'dag_run.clear_number \n'
                                        'FROM dag_run \n'
                                        'WHERE dag_run.dag_id = %(dag_id_1)s '
                                        'AND dag_run.execution_date = '
                                        '%(execution_date_1)s',
                             'timestamp': '2025-05-07T14:48:59.936343Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT max(log_template.id) AS '
                                        'max_1 \n'
                                        'FROM log_template',
                             'timestamp': '2025-05-07T14:48:59.937559Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'INSERT INTO dag_run (dag_id, '
                                        'queued_at, execution_date, '
                                        'start_date, end_date, state, run_id, '
                                        'creating_job_id, external_trigger, '
                                        'run_type, conf, data_interval_start, '
                                        'data_interval_end, '
                                        'last_scheduling_decision, dag_hash, '
                                        'log_template_id, updated_at, '
                                        'clear_number) VALUES (%(dag_id)s, '
                                        '%(queued_at)s, %(execution_date)s, '
                                        '%(start_date)s, %(end_date)s, '
                                        '%(state)s, %(run_id)s, '
                                        '%(creating_job_id)s, '
                                        '%(external_trigger)s, %(run_type)s, '
                                        '%(conf)s, %(data_interval_start)s, '
                                        '%(data_interval_end)s, '
                                        '%(last_scheduling_decision)s, '
                                        '%(dag_hash)s, %(log_template_id)s, '
                                        '%(updated_at)s, %(clear_number)s) '
                                        'RETURNING dag_run.id',
                             'timestamp': '2025-05-07T14:48:59.938776Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:48:59.940994Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {'db.executemany': True},
                             'message': 'INSERT INTO task_instance (task_id, '
                                        'dag_id, run_id, map_index, '
                                        'try_number, max_tries, hostname, '
                                        'unixname, pool, pool_slots, queue, '
                                        'priority_weight, operator, '
                                        'executor_config, updated_at, '
                                        'task_display_name) VALUES '
                                        '(%(task_id)s, %(dag_id)s, %(run_id)s, '
                                        '%(map_index)s, %(try_number)s, '
                                        '%(max_tries)s, %(hostname)s, '
                                        '%(unixname)s, %(pool)s, '
                                        '%(pool_slots)s, %(queue)s, '
                                        '%(priority_weight)s, %(operator)s, '
                                        '%(executor_config)s, %(updated_at)s, '
                                        '%(task_display_name)s)',
                             'timestamp': '2025-05-07T14:48:59.942443Z',
                             'type': 'default'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:48:59.944+0000'},
                             'level': 'info',
                             'message': 'created dagrun <DagRun import_sirene '
                                        '@ 2025-05-07 14:48:59.689915+00:00: '
                                        'manual__2025-05-07T14:48:59.689915+00:00, '
                                        'state:running, queued_at: None. '
                                        'externally triggered: False>',
                             'timestamp': '2025-05-07T14:48:59.944413Z',
                             'type': 'log'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT dag_run.state AS '
                                        'dag_run_state, dag_run.id AS '
                                        'dag_run_id, dag_run.dag_id AS '
                                        'dag_run_dag_id, dag_run.queued_at AS '
                                        'dag_run_queued_at, '
                                        'dag_run.execution_date AS '
                                        'dag_run_execution_date, '
                                        'dag_run.start_date AS '
                                        'dag_run_start_date, dag_run.end_date '
                                        'AS dag_run_end_date, dag_run.run_id '
                                        'AS dag_run_run_id, '
                                        'dag_run.creating_job_id AS '
                                        'dag_run_creating_job_id, '
                                        'dag_run.external_trigger AS '
                                        'dag_run_external_trigger, '
                                        'dag_run.run_type AS dag_run_run_type, '
                                        'dag_run.conf AS dag_run_conf, '
                                        'dag_run.data_interval_start AS '
                                        'dag_run_data_interval_start, '
                                        'dag_run.data_interval_end AS '
                                        'dag_run_data_interval_end, '
                                        'dag_run.dag_hash AS dag_run_dag_hash, '
                                        'dag_run.log_template_id AS '
                                        'dag_run_log_template_id, '
                                        'dag_run.updated_at AS '
                                        'dag_run_updated_at, '
                                        'dag_run.clear_number AS '
                                        'dag_run_clear_number \n'
                                        'FROM dag_run \n'
                                        'WHERE dag_run.id = %(pk_1)s',
                             'timestamp': '2025-05-07T14:48:59.946065Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:48:59.947853Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:48:59.950093Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'UPDATE dag_run SET '
                                        'last_scheduling_decision=%(last_scheduling_decision)s, '
                                        'updated_at=%(updated_at)s WHERE '
                                        'dag_run.id = %(dag_run_id)s',
                             'timestamp': '2025-05-07T14:48:59.951571Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'UPDATE task_instance SET '
                                        'state=%(state)s, '
                                        'try_number=%(try_number)s, '
                                        'updated_at=%(updated_at)s WHERE '
                                        'task_instance.dag_id = '
                                        '%(task_instance_dag_id)s AND '
                                        'task_instance.task_id = '
                                        '%(task_instance_task_id)s AND '
                                        'task_instance.run_id = '
                                        '%(task_instance_run_id)s AND '
                                        'task_instance.map_index = '
                                        '%(task_instance_map_index)s',
                             'timestamp': '2025-05-07T14:48:59.952375Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:48:59.956269Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT job.id, job.dag_id, job.state, '
                                        'job.job_type, job.start_date, '
                                        'job.end_date, job.latest_heartbeat, '
                                        'job.executor_class, job.hostname, '
                                        'job.unixname \n'
                                        'FROM job \n'
                                        'WHERE job.job_type = %(job_type_1)s '
                                        'ORDER BY CASE job.state WHEN '
                                        '%(param_1)s THEN %(param_2)s ELSE '
                                        '%(param_3)s END, job.latest_heartbeat '
                                        'DESC \n'
                                        ' LIMIT %(param_4)s',
                             'timestamp': '2025-05-07T14:48:59.961763Z',
                             'type': 'default'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:48:59.962+0000'},
                             'level': 'info',
                             'message': '[DAG TEST] starting task_id=start '
                                        'map_index=-1',
                             'timestamp': '2025-05-07T14:48:59.962444Z',
                             'type': 'log'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:48:59.962+0000'},
                             'level': 'info',
                             'message': '[DAG TEST] running task '
                                        '<TaskInstance: import_sirene.start '
                                        'manual__2025-05-07T14:48:59.689915+00:00 '
                                        '[scheduled]>',
                             'timestamp': '2025-05-07T14:48:59.962634Z',
                             'type': 'log'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:49:00.315+0000'},
                             'level': 'info',
                             'message': '[DAG TEST] end task task_id=start '
                                        'map_index=-1',
                             'timestamp': '2025-05-07T14:49:00.315815Z',
                             'type': 'log'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:49:00.316767Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT xcom.run_id AS xcom_run_id, '
                                        'xcom.task_id AS xcom_task_id, '
                                        'xcom.dag_id AS xcom_dag_id, '
                                        'xcom.map_index AS xcom_map_index, '
                                        'xcom.value AS xcom_value \n'
                                        'FROM xcom JOIN dag_run ON '
                                        'xcom.dag_run_id = dag_run.id \n'
                                        'WHERE xcom.key = %(key_1)s AND '
                                        'xcom.task_id = %(task_id_1)s AND '
                                        'xcom.dag_id = %(dag_id_1)s AND '
                                        'xcom.map_index = %(map_index_1)s AND '
                                        'xcom.run_id = %(run_id_1)s ORDER BY '
                                        'dag_run.execution_date DESC, '
                                        'xcom.timestamp DESC \n'
                                        ' LIMIT %(param_1)s',
                             'timestamp': '2025-05-07T14:49:00.319298Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'UPDATE dag_run SET '
                                        'last_scheduling_decision=%(last_scheduling_decision)s, '
                                        'updated_at=%(updated_at)s WHERE '
                                        'dag_run.id = %(dag_run_id)s',
                             'timestamp': '2025-05-07T14:49:00.320252Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'UPDATE task_instance SET '
                                        'state=%(state)s, '
                                        'try_number=%(try_number)s, '
                                        'updated_at=%(updated_at)s WHERE '
                                        'task_instance.dag_id = '
                                        '%(task_instance_dag_id)s AND '
                                        'task_instance.task_id = '
                                        '%(task_instance_task_id)s AND '
                                        'task_instance.run_id = '
                                        '%(task_instance_run_id)s AND '
                                        'task_instance.map_index = '
                                        '%(task_instance_map_index)s',
                             'timestamp': '2025-05-07T14:49:00.320801Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:49:00.322816Z',
                             'type': 'default'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT job.id, job.dag_id, job.state, '
                                        'job.job_type, job.start_date, '
                                        'job.end_date, job.latest_heartbeat, '
                                        'job.executor_class, job.hostname, '
                                        'job.unixname \n'
                                        'FROM job \n'
                                        'WHERE job.job_type = %(job_type_1)s '
                                        'ORDER BY CASE job.state WHEN '
                                        '%(param_1)s THEN %(param_2)s ELSE '
                                        '%(param_3)s END, job.latest_heartbeat '
                                        'DESC \n'
                                        ' LIMIT %(param_4)s',
                             'timestamp': '2025-05-07T14:49:00.323606Z',
                             'type': 'default'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:49:00.324+0000'},
                             'level': 'info',
                             'message': '[DAG TEST] starting '
                                        'task_id=import_stock_etablissement_historique '
                                        'map_index=-1',
                             'timestamp': '2025-05-07T14:49:00.324144Z',
                             'type': 'log'},
                            {'category': 'airflow.models.dag',
                             'data': {'asctime': '2025-05-07T14:49:00.324+0000'},
                             'level': 'info',
                             'message': '[DAG TEST] running task '
                                        '<TaskInstance: '
                                        'import_sirene.import_stock_etablissement_historique '
                                        'manual__2025-05-07T14:48:59.689915+00:00 '
                                        '[scheduled]>',
                             'timestamp': '2025-05-07T14:49:00.324339Z',
                             'type': 'log'},
                            {'category': 'subprocess',
                             'data': {'thread.id': '127776040237952',
                                      'thread.name': 'MainThread'},
                             'message': '/opt/airflow/venvs/python/venv/bin/python '
                                        '-c \n'
                                        'try:\n'
                                        '    from importlib.metadata import '
                                        'version\n'
                                        'except ImportError:\n'
                                        '    from importlib_metadata import '
                                        'version\n'
                                        'print(version("apache-airflow"))\n',
                             'timestamp': '2025-05-07T14:49:00.338014Z',
                             'type': 'subprocess'},
                            {'category': 'subprocess',
                             'data': {'thread.id': '127776040237952',
                                      'thread.name': 'MainThread'},
                             'message': '/opt/airflow/venvs/python/venv/bin/python '
                                        '-c import sys; '
                                        'print(".".join(map(str, '
                                        'sys.version_info)))',
                             'timestamp': '2025-05-07T14:49:00.543707Z',
                             'type': 'subprocess'},
                            {'category': 'subprocess',
                             'data': {'thread.id': '127776040237952',
                                      'thread.name': 'MainThread'},
                             'message': '/opt/airflow/venvs/python/venv/bin/python '
                                        '/tmp/venv-callnafp1l13/script.py '
                                        '/tmp/venv-callnafp1l13/script.in '
                                        '/tmp/venv-callnafp1l13/script.out '
                                        '/tmp/venv-callnafp1l13/string_args.txt '
                                        '/tmp/venv-callnafp1l13/termination.log',
                             'timestamp': '2025-05-07T14:49:00.558467Z',
                             'type': 'subprocess'},
                            {'category': 'airflow.models.dag.DAG',
                             'data': {'asctime': '2025-05-07T14:49:01.763+0000'},
                             'level': 'error',
                             'message': 'Task failed; ti=<TaskInstance: '
                                        'import_sirene.import_stock_etablissement_historique '
                                        'manual__2025-05-07T14:48:59.689915+00:00 '
                                        '[failed]>',
                             'timestamp': '2025-05-07T14:49:01.763486Z',
                             'type': 'log'},
                            {'category': 'query',
                             'data': {},
                             'message': 'SELECT '
                                        'task_instance.task_display_name, '
                                        'task_instance.task_id, '
                                        'task_instance.dag_id, '
                                        'task_instance.run_id, '
                                        'task_instance.map_index, '
                                        'task_instance.start_date, '
                                        'task_instance.end_date, '
                                        'task_instance.duration, '
                                        'task_instance.state, '
                                        'task_instance.try_number, '
                                        'task_instance.max_tries, '
                                        'task_instance.hostname, '
                                        'task_instance.unixname, '
                                        'task_instance.job_id, '
                                        'task_instance.pool, '
                                        'task_instance.pool_slots, '
                                        'task_instance.queue, '
                                        'task_instance.priority_weight, '
                                        'task_instance.operator, '
                                        'task_instance.custom_operator_name, '
                                        'task_instance.queued_dttm, '
                                        'task_instance.queued_by_job_id, '
                                        'task_instance.pid, '
                                        'task_instance.executor, '
                                        'task_instance.executor_config, '
                                        'task_instance.updated_at, '
                                        'task_instance.rendered_map_index, '
                                        'task_instance.external_executor_id, '
                                        'task_instance.trigger_id, '
                                        'task_instance.trigger_timeout, '
                                        'task_instance.next_method, '
                                        'task_instance.next_kwargs, '
                                        'dag_run_1.state AS state_1, '
                                        'dag_run_1.id, dag_run_1.dag_id AS '
                                        'dag_id_1, dag_run_1.queued_at, '
                                        'dag_run_1.execution_date, '
                                        'dag_run_1.start_date AS start_date_1, '
                                        'dag_run_1.end_date...',
                             'timestamp': '2025-05-07T14:49:01.811396Z',
                             'type': 'default'}]},
 'contexts': {'runtime': {'build': '3.12.9 (main, Feb  6 2025, 22:37:05) [GCC '
                                   '12.2.0]',
                          'name': 'CPython',
                          'version': '3.12.9'},
              'trace': {'dynamic_sampling_context': {'environment': 'production',
                                                     'public_key': 'cd84156bd026269b4f25fccaa3fac8d5',
                                                     'sample_rate': '1',
                                                     'trace_id': '95c78c83d2674d559a8b33df4d8cf4c6'},
                        'parent_span_id': None,
                        'span_id': 'b1af39e4ce52a55f',
                        'trace_id': '95c78c83d2674d559a8b33df4d8cf4c6'}},
 'environment': 'production',
 'event_id': 'ec95264dcf0a4843aa9fa3d9790dfb17',
 'extra': {'asctime': '2025-05-07T14:49:01.812+0000',
           'sys.argv': ['/home/airflow/.local/bin/airflow',
                        'dags',
                        'test',
                        'import_sirene']},
 'level': 'error',
 'logentry': {'message': 'Marking run %s failed',
              'params': ['<DagRun import_sirene @ 2025-05-07 '
                         '14:48:59.689915+00:00: '
                         'manual__2025-05-07T14:48:59.689915+00:00, '
                         'state:running, queued_at: None. externally '
                         'triggered: False>']},
 'logger': 'airflow.models.dagrun.DagRun',
 'modules': {'adal': '1.2.7',
             'adlfs': '2024.12.0',
             'aiobotocore': '2.19.0',
             'aiofiles': '23.2.1',
             'aiohappyeyeballs': '2.4.4',
             'aiohttp': '3.11.11',
             'aioitertools': '0.12.0',
             'aiomysql': '0.2.0',
             'aiosignal': '1.3.2',
             'aiosqlite': '0.20.0',
             'alembic': '1.14.1',
             'amqp': '5.3.1',
             'annotated-types': '0.7.0',
             'anyio': '4.8.0',
             'apache-airflow': '2.10.5',
             'apache-airflow-providers-amazon': '9.2.0',
             'apache-airflow-providers-celery': '3.10.0',
             'apache-airflow-providers-cncf-kubernetes': '10.1.0',
             'apache-airflow-providers-common-compat': '1.3.0',
             'apache-airflow-providers-common-io': '1.5.0',
             'apache-airflow-providers-common-sql': '1.21.0',
             'apache-airflow-providers-docker': '4.0.0',
             'apache-airflow-providers-elasticsearch': '6.0.0',
             'apache-airflow-providers-fab': '1.5.2',
             'apache-airflow-providers-ftp': '3.12.0',
             'apache-airflow-providers-google': '12.0.0',
             'apache-airflow-providers-grpc': '3.7.0',
             'apache-airflow-providers-hashicorp': '4.0.0',
             'apache-airflow-providers-http': '5.0.0',
             'apache-airflow-providers-imap': '3.8.0',
             'apache-airflow-providers-microsoft-azure': '12.0.0',
             'apache-airflow-providers-mysql': '6.0.0',
             'apache-airflow-providers-odbc': '4.9.0',
             'apache-airflow-providers-openlineage': '2.0.0',
             'apache-airflow-providers-postgres': '6.0.0',
             'apache-airflow-providers-redis': '4.0.0',
             'apache-airflow-providers-sendgrid': '4.0.0',
             'apache-airflow-providers-sftp': '5.0.0',
             'apache-airflow-providers-slack': '9.0.0',
             'apache-airflow-providers-smtp': '1.9.0',
             'apache-airflow-providers-snowflake': '6.0.0',
             'apache-airflow-providers-sqlite': '4.0.0',
             'apache-airflow-providers-ssh': '4.0.0',
             'apispec': '6.8.1',
             'argcomplete': '3.5.3',
             'asgiref': '3.8.1',
             'asn1crypto': '1.5.1',
             'asyncpg': '0.30.0',
             'asyncssh': '2.19.0',
             'attrs': '25.1.0',
             'authlib': '1.3.1',
             'azure-batch': '14.2.0',
             'azure-common': '1.1.28',
             'azure-core': '1.32.0',
             'azure-cosmos': '4.9.0',
             'azure-datalake-store': '0.0.53',
             'azure-identity': '1.19.0',
             'azure-keyvault-secrets': '4.9.0',
             'azure-kusto-data': '4.6.3',
             'azure-mgmt-containerinstance': '10.1.0',
             'azure-mgmt-containerregistry': '10.3.0',
             'azure-mgmt-core': '1.5.0',
             'azure-mgmt-cosmosdb': '9.7.0',
             'azure-mgmt-datafactory': '9.1.0',
             'azure-mgmt-datalake-nspkg': '3.0.1',
             'azure-mgmt-datalake-store': '0.5.0',
             'azure-mgmt-nspkg': '3.0.2',
             'azure-mgmt-resource': '23.2.0',
             'azure-mgmt-storage': '22.0.0',
             'azure-nspkg': '3.0.2',
             'azure-servicebus': '7.13.0',
             'azure-storage-blob': '12.24.1',
             'azure-storage-file-datalake': '12.18.1',
             'azure-storage-file-share': '12.20.1',
             'azure-synapse-artifacts': '0.19.0',
             'azure-synapse-spark': '0.7.0',
             'babel': '2.17.0',
             'backoff': '2.2.1',
             'bcrypt': '4.2.1',
             'beautifulsoup4': '4.13.0',
             'billiard': '4.2.1',
             'blinker': '1.9.0',
             'boto3': '1.36.3',
             'botocore': '1.36.3',
             'cachelib': '0.9.0',
             'cachetools': '5.5.1',
             'cattrs': '24.1.2',
             'celery': '5.4.0',
             'certifi': '2025.1.31',
             'cffi': '1.17.1',
             'chardet': '5.2.0',
             'charset-normalizer': '3.4.1',
             'click': '8.1.8',
             'click-didyoumean': '0.3.1',
             'click-plugins': '1.1.1',
             'click-repl': '0.3.0',
             'clickclick': '20.10.2',
             'colorama': '0.4.6',
             'colorlog': '6.9.0',
             'configupdater': '3.2',
             'connexion': '2.14.2',
             'cron-descriptor': '1.4.5',
             'croniter': '6.0.0',
             'cryptography': '42.0.8',
             'data-inclusion-scripts': '0.0.1',
             'db-dtypes': '1.4.0',
             'decorator': '5.1.1',
             'deprecated': '1.2.18',
             'dill': '0.3.9',
             'distlib': '0.3.9',
             'dnspython': '2.7.0',
             'docker': '7.1.0',
             'docstring_parser': '0.16',
             'elastic-transport': '8.17.0',
             'elasticsearch': '8.17.1',
             'email_validator': '2.2.0',
             'eventlet': '0.39.0',
             'filelock': '3.17.0',
             'flask': '2.2.5',
             'flask-appbuilder': '4.5.2',
             'flask-babel': '2.0.0',
             'flask-caching': '2.3.0',
             'flask-jwt-extended': '4.7.1',
             'flask-limiter': '3.10.1',
             'flask-login': '0.6.3',
             'flask-session': '0.5.0',
             'flask-sqlalchemy': '2.5.1',
             'flask-wtf': '1.2.2',
             'flower': '2.0.1',
             'frozenlist': '1.5.0',
             'fsspec': '2025.2.0',
             'gcloud-aio-auth': '5.3.2',
             'gcloud-aio-bigquery': '7.1.0',
             'gcloud-aio-storage': '9.3.0',
             'gcsfs': '2025.2.0',
             'gevent': '24.11.1',
             'google-ads': '25.1.0',
             'google-analytics-admin': '0.23.3',
             'google-api-core': '2.24.1',
             'google-api-python-client': '2.160.0',
             'google-auth': '2.38.0',
             'google-auth-httplib2': '0.2.0',
             'google-auth-oauthlib': '1.2.1',
             'google-cloud-aiplatform': '1.79.0',
             'google-cloud-alloydb': '0.4.1',
             'google-cloud-appengine-logging': '1.5.0',
             'google-cloud-audit-log': '0.3.0',
             'google-cloud-automl': '2.15.0',
             'google-cloud-batch': '0.17.33',
             'google-cloud-bigquery': '3.20.1',
             'google-cloud-bigquery-datatransfer': '3.18.0',
             'google-cloud-bigtable': '2.28.1',
             'google-cloud-build': '3.29.0',
             'google-cloud-compute': '1.24.0',
             'google-cloud-container': '2.55.1',
             'google-cloud-core': '2.4.1',
             'google-cloud-datacatalog': '3.24.1',
             'google-cloud-dataflow-client': '0.8.15',
             'google-cloud-dataform': '0.5.14',
             'google-cloud-dataplex': '2.6.0',
             'google-cloud-dataproc': '5.16.0',
             'google-cloud-dataproc-metastore': '1.17.0',
             'google-cloud-dlp': '3.26.0',
             'google-cloud-kms': '3.2.2',
             'google-cloud-language': '2.16.0',
             'google-cloud-logging': '3.11.4',
             'google-cloud-memcache': '1.11.0',
             'google-cloud-monitoring': '2.26.0',
             'google-cloud-orchestration-airflow': '1.16.1',
             'google-cloud-os-login': '2.16.0',
             'google-cloud-pubsub': '2.28.0',
             'google-cloud-redis': '2.17.0',
             'google-cloud-resource-manager': '1.14.0',
             'google-cloud-run': '0.10.14',
             'google-cloud-secret-manager': '2.22.1',
             'google-cloud-spanner': '3.51.0',
             'google-cloud-speech': '2.30.0',
             'google-cloud-storage': '2.19.0',
             'google-cloud-storage-transfer': '1.15.0',
             'google-cloud-tasks': '2.18.0',
             'google-cloud-texttospeech': '2.24.0',
             'google-cloud-translate': '3.19.0',
             'google-cloud-videointelligence': '2.15.0',
             'google-cloud-vision': '3.9.0',
             'google-cloud-workflows': '1.16.0',
             'google-crc32c': '1.6.0',
             'google-re2': '1.1.20240702',
             'google-resumable-media': '2.7.2',
             'googleapis-common-protos': '1.66.0',
             'graphviz': '0.20.3',
             'greenlet': '3.1.1',
             'grpc-google-iam-v1': '0.14.0',
             'grpc-interceptor': '0.15.4',
             'grpcio': '1.70.0',
             'grpcio-gcp': '0.2.2',
             'grpcio-status': '1.62.3',
             'gunicorn': '23.0.0',
             'h11': '0.16.0',
             'h2': '4.2.0',
             'hpack': '4.1.0',
             'httpcore': '1.0.9',
             'httplib2': '0.22.0',
             'httpx': '0.27.0',
             'humanize': '4.11.0',
             'hvac': '2.3.0',
             'hyperframe': '6.1.0',
             'idna': '3.10',
             'ijson': '3.3.0',
             'immutabledict': '4.2.1',
             'importlib-metadata': '6.11.0',
             'inflection': '0.5.1',
             'iniconfig': '2.0.0',
             'isodate': '0.7.2',
             'itsdangerous': '2.2.0',
             'jinja2': '3.1.5',
             'jmespath': '0.10.0',
             'json-merge-patch': '0.2',
             'jsonpath-ng': '1.7.0',
             'jsonschema': '4.23.0',
             'jsonschema-specifications': '2024.10.1',
             'kombu': '5.4.2',
             'kubernetes': '30.1.0',
             'kubernetes_asyncio': '30.1.0',
             'lazy-object-proxy': '1.10.0',
             'ldap3': '2.9.1',
             'limits': '4.0.1',
             'linkify-it-py': '2.0.3',
             'lockfile': '0.12.2',
             'looker-sdk': '25.0.0',
             'lxml': '5.3.0',
             'mako': '1.3.8',
             'markdown-it-py': '3.0.0',
             'markupsafe': '3.0.2',
             'marshmallow': '3.26.0',
             'marshmallow-oneofschema': '3.1.1',
             'marshmallow-sqlalchemy': '0.28.2',
             'mdit-py-plugins': '0.4.2',
             'mdurl': '0.1.2',
             'methodtools': '0.4.7',
             'microsoft-kiota-abstractions': '1.3.3',
             'microsoft-kiota-authentication-azure': '1.1.0',
             'microsoft-kiota-http': '1.3.3',
             'microsoft-kiota-serialization-json': '1.0.0',
             'microsoft-kiota-serialization-text': '1.0.0',
             'more-itertools': '10.6.0',
             'msal': '1.31.1',
             'msal-extensions': '1.2.0',
             'msgraph-core': '1.2.1',
             'msrest': '0.7.1',
             'msrestazure': '0.6.4.post1',
             'multidict': '6.1.0',
             'mysql-connector-python': '9.2.0',
             'mysqlclient': '2.2.7',
             'numpy': '1.26.4',
             'oauthlib': '3.2.2',
             'openlineage-integration-common': '1.27.0',
             'openlineage-python': '1.27.0',
             'openlineage_sql': '1.27.0',
             'opentelemetry-api': '1.27.0',
             'opentelemetry-exporter-otlp': '1.27.0',
             'opentelemetry-exporter-otlp-proto-common': '1.27.0',
             'opentelemetry-exporter-otlp-proto-grpc': '1.27.0',
             'opentelemetry-exporter-otlp-proto-http': '1.27.0',
             'opentelemetry-proto': '1.27.0',
             'opentelemetry-sdk': '1.27.0',
             'opentelemetry-semantic-conventions': '0.48b0',
             'ordered-set': '4.1.0',
             'packaging': '24.2',
             'pandas': '2.1.4',
             'pandas-gbq': '0.26.1',
             'paramiko': '3.5.0',
             'pathspec': '0.12.1',
             'pendulum': '3.0.0',
             'pip': '25.0',
             'platformdirs': '4.3.6',
             'pluggy': '1.5.0',
             'ply': '3.11',
             'portalocker': '2.10.1',
             'prison': '0.2.1',
             'prometheus_client': '0.21.1',
             'prompt_toolkit': '3.0.50',
             'propcache': '0.2.1',
             'proto-plus': '1.26.0',
             'protobuf': '4.25.6',
             'psutil': '6.1.1',
             'psycopg2-binary': '2.9.10',
             'pyarrow': '19.0.0',
             'pyasn1': '0.6.1',
             'pyasn1_modules': '0.4.0',
             'pyathena': '3.12.2',
             'pycparser': '2.22',
             'pydantic': '2.10.6',
             'pydantic_core': '2.27.2',
             'pydata-google-auth': '1.9.1',
             'pygments': '2.19.1',
             'pyjwt': '2.10.1',
             'pymysql': '1.1.1',
             'pynacl': '1.5.0',
             'pyodbc': '5.2.0',
             'pyopenssl': '24.3.0',
             'pyparsing': '3.2.1',
             'pytest': '8.3.4',
             'python-daemon': '3.1.2',
             'python-dateutil': '2.9.0.post0',
             'python-dotenv': '1.0.1',
             'python-http-client': '3.3.7',
             'python-ldap': '3.4.4',
             'python-nvd3': '0.16.0',
             'python-slugify': '8.0.4',
             'python3-saml': '1.16.0',
             'pytz': '2025.1',
             'pyyaml': '6.0.2',
             'redis': '5.2.1',
             'redshift-connector': '2.1.5',
             'referencing': '0.36.2',
             'requests': '2.32.3',
             'requests-mock': '1.12.1',
             'requests-oauthlib': '1.3.1',
             'requests-toolbelt': '1.0.0',
             'rfc3339-validator': '0.1.4',
             'rich': '13.9.4',
             'rich-argparse': '1.6.0',
             'rpds-py': '0.22.3',
             'rsa': '4.9',
             's3transfer': '0.11.2',
             'scramp': '1.4.5',
             'sendgrid': '6.11.0',
             'sentry-sdk': '2.20.0',
             'setproctitle': '1.3.4',
             'setuptools': '75.8.0',
             'shapely': '2.0.7',
             'six': '1.17.0',
             'slack_sdk': '3.34.0',
             'sniffio': '1.3.1',
             'snowflake-connector-python': '3.13.2',
             'snowflake-sqlalchemy': '1.7.3',
             'sortedcontainers': '2.4.0',
             'soupsieve': '2.6',
             'sqlalchemy': '1.4.54',
             'sqlalchemy-bigquery': '1.12.1',
             'sqlalchemy-jsonfield': '1.0.2',
             'sqlalchemy-spanner': '1.8.0',
             'sqlalchemy-utils': '0.41.2',
             'sqlparse': '0.5.3',
             'sshtunnel': '0.4.0',
             'starkbank-ecdsa': '2.2.0',
             'statsd': '4.0.1',
             'std-uritemplate': '2.0.1',
             'tabulate': '0.9.0',
             'tenacity': '9.0.0',
             'termcolor': '2.5.0',
             'text-unidecode': '1.3',
             'time-machine': '2.16.0',
             'tomlkit': '0.13.2',
             'tornado': '6.4.2',
             'typing_extensions': '4.12.2',
             'tzdata': '2025.1',
             'uc-micro-py': '1.0.3',
             'universal_pathlib': '0.2.6',
             'uritemplate': '4.1.1',
             'urllib3': '2.3.0',
             'uv': '0.5.24',
             'vine': '5.1.0',
             'virtualenv': '20.29.1',
             'watchtower': '3.3.1',
             'wcwidth': '0.2.13',
             'websocket-client': '1.8.0',
             'werkzeug': '2.2.3',
             'wirerope': '1.0.0',
             'wrapt': '1.17.2',
             'wtforms': '3.2.1',
             'xmlsec': '1.3.14',
             'yarl': '1.18.3',
             'zipp': '3.21.0',
             'zope.event': '5.0',
             'zope.interface': '7.2'},
 'platform': 'python',
 'release': '',
 'sdk': {'integrations': ['aiohttp',
                          'argv',
                          'asyncpg',
                          'atexit',
                          'boto3',
                          'celery',
                          'dedupe',
                          'excepthook',
                          'flask',
                          'httpx',
                          'logging',
                          'modules',
                          'redis',
                          'sqlalchemy',
                          'stdlib',
                          'threading',
                          'tornado'],
         'name': 'sentry.python.flask',
         'packages': [{'name': 'pypi:sentry-sdk', 'version': '2.20.0'}],
         'version': '2.20.0'},
 'server_name': '5ec9965d35e5',
 'timestamp': '2025-05-07T14:49:01.812682Z',
 'transaction_info': {}}
=====================
{'attachments': [],
 'log_record': <LogRecord: airflow.models.dagrun.DagRun, 40, /home/airflow/.local/lib/python3.12/site-packages/airflow/models/dagrun.py, 823, "Marking run %s failed">}
[2025-05-07T14:49:01.827+0000] {dagrun.py:905} INFO - DagRun Finished: dag_id=import_sirene, execution_date=2025-05-07 14:48:59.689915+00:00, run_id=manual__2025-05-07T14:48:59.689915+00:00, run_start_date=2025-05-07 14:48:59.689915+00:00, run_end_date=2025-05-07 14:49:01.827901+00:00, run_duration=2.137986, state=failed, external_trigger=False, run_type=manual, data_interval_start=2025-05-07 14:48:59.689915+00:00, data_interval_end=2025-05-07 14:48:59.689915+00:00, dag_hash=None
