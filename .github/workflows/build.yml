# References
# https://docs.docker.com/build/ci/github-actions/
# https://docs.github.com/en/actions/publishing-packages/publishing-docker-images

name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    # default types + ready_for_review
    types: [opened, synchronize, repopened, ready_for_review]

jobs:
  build:
    runs-on: ubuntu-latest

    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.draft) }}

    strategy:
      matrix:
        service: ["api", "datawarehouse", "pipeline"]

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}-${{ matrix.service }}

    permissions:
      contents: read
      packages: write

    defaults:
      run:
        working-directory: ${{ matrix.service }}

    steps:
      - uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha,format=long,prefix=

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run tests
        if: matrix.service == 'api'
        env:
          API_ENV: test
        run: |
          docker compose run --entrypoint pytest api -p no:cacheprovider -vv

      - name: Run tests
        if: matrix.service == 'pipeline'
        run: |
          echo #TODO

      - name: Push image to GitHub registry
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build
    runs-on: ubuntu-20.04
    environment: staging

    env:
      ENV: ${{ vars.ENVIRONMENT }}  # used in this workflow

      # used by terraform cli
      AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      TF_VARS: ${{ secrets.TF_VARS }}

    defaults:
      run:
        working-directory: deployment

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.1"

      - name: mask tf variables
        run: |
          echo "${TF_VARS}" | jq --raw-output 'to_entries | map("::add-mask::\(.value // empty)") | .[]'

      # `TF_VAR_*` are case sensitive and must match the case of variables
      - name: set tf variables
        run: |
          echo "${TF_VARS}" | jq --raw-output 'to_entries | map("TF_VAR_\(.key)=\(.value //  "")") | .[]' >> "${GITHUB_ENV}"

      - name: tf init
        run: |
          terraform init \
            -backend-config "bucket=data-inclusion-tf-states" \
            -backend-config "key=${ENV}"

      - name: tf validate
        run: |
          terraform validate

      - name: tf plan
        run: |
          terraform plan

      - name: tf apply
        run: |
          terraform apply -auto-approve
