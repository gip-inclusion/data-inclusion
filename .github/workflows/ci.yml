name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review, labeled]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      DWH_IMAGE: gip-inclusion/di-pg-test

    permissions:
      contents: read
      packages: write

    outputs:
      image-name: ${{ steps.meta.outputs.tags }}

    steps:
      - uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DWH_IMAGE }}
          tags: |
            type=sha,format=long,prefix=

      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          context: ./datawarehouse
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  test:
    runs-on: ubuntu-latest
    needs: build

    env:
      REGISTRY: ghcr.io

    strategy:
      matrix:
        # TODO: datawarehouse/processings, pipeline
        service: ["api"]
      fail-fast: false

    permissions:
      contents: read
      packages: read

    defaults:
      run:
        working-directory: ${{ matrix.service }}

    steps:
      - uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start database
        env:
          CI: 1
          TARGET_POSTGRES_PORT: 5455
          DWH_IMAGE: ${{ needs.build.outputs.image-name }}
        run: docker compose --progress=plain up datawarehouse --pull=always --detach

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          working-directory: ${{ matrix.service }}

      - name: Run tests
        env:
          CI: 1
          ENV: test
        run: uv run --all-groups --frozen pytest -vv
